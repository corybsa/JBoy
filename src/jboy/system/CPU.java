package jboy.system;

import io.reactivex.Observable;
import io.reactivex.Observer;
import jboy.other.CpuInfo;

import java.time.Instant;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * <h3>Description</h3>
 * <h5>The GameBoy uses a chip that's a cross between the Intel 8080 and the Zilog Z80. The chip is the Sharp LR35902.</h5>
 *
 * <hr/>
 * <h3>Information about the CPU</h3>
 * <ul>
 *     <li>Number of instructions: 500</li>
 *     <li>
 *         Registers
 *         <ul>
 *             <li>8-bit: A, B, C, D, E, F, H, L</li>
 *             <li>16-bit: AF, BC, DE, HL, SP, PC</li>
 *         </ul>
 *     </li>
 *     <li>Clock speed: 4.194304 MHz (4.19 MHz)</li>
 * </ul>
 *
 * <hr/>
 * <h3>A few notes on the CPU:</h3>
 * <ul>
 *     <li>Official Nintendo documents refer to "machine cycles" when describing instructions.</li>
 *     <li>One machine cycle equals four CPU clock cycles.</li>
 *     <li>The numerical value of a machine cycle is 1.048576 MHz (1.05 MHz)</li>
 * </ul>
 *
 * <hr/>
 * <h3>A few notes on the registers:</h3>
 * <ul>
 *     <li>The F register is indirectly accessible by the programmer, and is used to store the results of various math operations.</li>
 *     <li>The PC register points to the next instruction to be executed in memory.</li>
 *     <li>The SP register points to the current stack position.</li>
 *     <li>
 *         The F register consists of the following:
 *         <ul>
 *             <li>Zero flag (Z, 7th bit): This bit is set when the result of a math operation is zero or two values match when using the CP instruction.</li>
 *             <li>Subtract flag (N, 6th bit): This bit is set if a subtraction was performed in the last math instruction regardless of result..</li>
 *             <li>Half carry flag (H, 5th bit): This bit is set if a carry occurred from the lower nibble in the last math operation.</li>
 *             <li>Carry flag (C, 4th bit): This bit is set when an operation results in carrying from or borrowing to the 7th bit.</li>
 *         </ul>
 *     </li>
 *     <li>
 *         On power up, the PC is initialized to 0x100 and the instruction at that location in the ROM is executed.
 *         From here on the PC is controlled indirectly by the instructions themselves that were generated by the programmer of the ROM cart.
 *     </li>
 *     <li>
 *         The SP is used to keep track of the top of the stack.
 *         <ul>
 *             <li>The Stack is used for saving variables, saving return addressed, passing arguments to subroutines and various other uses.</li>
 *             <li>The instructions CALL, PUSH and RST all put information onto the stack.</li>
 *             <li>The instructions POP, RET and RETI all take information off of the stack.</li>
 *             <li>Interrupts put a return address on the stack and remove it at the completion as well.</li>
 *             <li>
 *                 As information is put onto the stack, the stack grows DOWNWARD in RAM. As a result SP should always be initialized at the highest location of RAM space that has been allocated for use by the stack.
 *                 <ul>
 *                     <li>
 *                         For example, if a programmer wants to locate the SP at the top of low RAM space (0xC000 - 0xDFFF) he would set SP to 0xE000 using LD SP,0xE000.
 *                         (The SP automatically decrements before it puts something onto the stack, so it is perfectly acceptable to assign it a value which points to a memory address which is one location past the end of available RAM.)
 *                     </li>
 *                     <li>The SP is initialized to 0xFFFE on power up, but a programmer should not rely on this setting and should explicitly set its value.</li>
 *                 </ul>
 *             </li>
 *         </ul>
 *     </li>
 * </ul>
 */
public class CPU extends Observable<CpuInfo> {
    // The frequency of the clock in MHz.
    public static final int FREQUENCY = 4194304;

    // Value of the Zero flag is 0b10000000
    public static final int FLAG_ZERO = 0x80;

    // Value of the Subtract flag is 0b01000000
    public static final int FLAG_SUB = 0x40;

    // Value of the Half Carry flag is 0b00100000
    public static final int FLAG_HALF = 0x20;

    // Value of the Carry flag is 0b00010000
    public static final int FLAG_CARRY = 0x10;

    private int A;
    private int B;
    private int C;
    private int D;
    private int E;
    private int F;
    private int H;
    private int L;
    private int SP;
    private int PC;

    private Observer<? super CpuInfo> observer;

    private boolean isRunning = false;
    private boolean ime = true;
    private boolean pendingEnableIME = false;
    private boolean isStopped = false;
    private boolean haltBug = false;

    private long cycles = 0;
    private long cyclesSinceLastSync = 0;
    private long lastSyncTime = 0;

    private final Memory memory;
    private final GPU gpu;
    private final Timers timers;

    private final HashMap<Integer, Instruction> instructions;
    private final CpuInfo info;
    private ArrayList<Integer> breakpoints;

    public CPU(Memory memory, GPU gpu) {
        this.instructions = new Instructions(this);
        this.memory = memory;
        this.gpu = gpu;
        this.timers = new Timers(this.memory);
        this.info = new CpuInfo(this);
        this.breakpoints = new ArrayList<>();

        this.reset();
    }

    @Override
    protected void subscribeActual(Observer<? super CpuInfo> observer) {
        this.observer = observer;
    }

    /**
     * Sets registers to default values.
     */
    void reset() {
        this.isRunning = false;

        this.setAF(0x01B0);
        this.setBC(0x0013);
        this.setDE(0x00D8);
        this.setHL(0x014D);
        this.setSP(0xFFFE);
        this.setPC(0x100);

        this.memory.setByteAt(IORegisters.TIMA, 0x00);
        this.memory.setByteAt(IORegisters.TMA, 0x00);
        this.memory.setByteAt(IORegisters.TAC, 0x00);
        this.memory.setByteAt(IORegisters.INTERRUPT_FLAGS, 0xE1);
        this.memory.setByteAt(IORegisters.SOUND1_SWEEP, 0x80);
        this.memory.setByteAt(IORegisters.SOUND1_LENGTH_WAVE, 0xBF);
        this.memory.setByteAt(IORegisters.SOUND1_ENVELOPE, 0xF3);
        this.memory.setByteAt(IORegisters.SOUND1_HIGH_FREQUENCY, 0xBF);
        this.memory.setByteAt(IORegisters.SOUND2_LENGTH_WAVE, 0x3F);
        this.memory.setByteAt(IORegisters.SOUND2_ENVELOPE, 0x00);
        this.memory.setByteAt(IORegisters.SOUND2_HIGH_FREQUENCY, 0xBF);
        this.memory.setByteAt(IORegisters.SOUND3_ENABLE, 0x7F);
        this.memory.setByteAt(IORegisters.SOUND3_LENGTH, 0xFF);
        this.memory.setByteAt(IORegisters.SOUND3_OUTPUT_LEVEL, 0x9F);
        this.memory.setByteAt(IORegisters.SOUND3_FREQUENCY_HIGH_DATA, 0xBF);
        this.memory.setByteAt(IORegisters.SOUND4_LENGTH, 0xFF);
        this.memory.setByteAt(IORegisters.SOUND4_ENVELOPE, 0x00);
        this.memory.setByteAt(IORegisters.SOUND4_COUNTER, 0x00);
        this.memory.setByteAt(IORegisters.SOUND4_INITIAL, 0xBF);
        this.memory.setByteAt(IORegisters.SOUND_CHANNEL_CONTROL, 0x77);
        this.memory.setByteAt(IORegisters.SOUND_OUTPUT_CONTROL, 0xF3);
        this.memory.setByteAt(IORegisters.SOUND_ENABLE, 0xF1);
        this.memory.setByteAt(IORegisters.LCDC, 0x91);
        this.memory.setByteAt(IORegisters.LCD_STATUS, 0x80);
        this.memory.setByteAt(IORegisters.SCROLL_Y, 0x00);
        this.memory.setByteAt(IORegisters.SCROLL_X, 0x00);
        this.memory.setByteAt(IORegisters.LY_COMPARE, 0x00);
        this.memory.setByteAt(IORegisters.BG_PALETTE_DATA, 0xFC);
        this.memory.setByteAt(IORegisters.OBJECT_PALETTE0_DATA, 0xFF);
        this.memory.setByteAt(IORegisters.OBJECT_PALETTE1_DATA, 0xFF);
        this.memory.setByteAt(IORegisters.WINDOW_Y, 0x00);
        this.memory.setByteAt(IORegisters.WINDOW_X, 0x00);
        this.memory.setByteAt(IORegisters.INTERRUPT_ENABLE, 0x00);

        this.updateObserver();
    }

    // region Register setters and getters
    public int getA() {
        return this.A;
    }

    public int getB() {
        return this.B;
    }

    public int getC() {
        return this.C;
    }

    public int getD() {
        return this.D;
    }

    public int getE() {
        return this.E;
    }

    public int getF() {
        return this.F;
    }

    public int getH() {
        return this.H;
    }

    public int getL() {
        return this.L;
    }

    public int getAF() {
        return (this.A << 8) + this.F;
    }

    public int getBC() {
        return (this.B << 8) + this.C;
    }

    public int getDE() {
        return (this.D << 8) + this.E;
    }

    public int getHL() {
        return (this.H << 8) + this.L;
    }

    public void setA(int n) {
        this.A = n;
    }

    public void setB(int n) {
        this.B = n;
    }

    public void setC(int n) {
        this.C = n;
    }

    public void setD(int n) {
        this.D = n;
    }

    public void setE(int n) {
        this.E = n;
    }

    public void setF(int n) {
        this.F = (n & 0xF0);
    }

    public void setH(int n) {
        this.H = n;
    }

    public void setL(int n) {
        this.L = n;
    }

    public void setAF(int n) {
        this.A = (n & 0xFF00) >> 8;
        this.F = n & 0x00F0;
    }

    public void setBC(int n) {
        this.B = (n & 0xFF00) >> 8;
        this.C = n & 0x00FF;
    }

    public void setDE(int n) {
        this.D = (n & 0xFF00) >> 8;
        this.E = n & 0x00FF;
    }

    public void setHL(int n) {
        this.H = (n & 0xFF00) >> 8;
        this.L = n & 0x00FF;
    }

    public int getSP() {
        return this.SP;
    }

    public int getPC() {
        return this.PC;
    }

    public void setPC(int n) {
        this.PC = n;
    }

    public void setSP(int n) {
        this.SP = n;
    }
    // endregion

    /**
     * Tick one clock cycle
     */
    public void tick() {
        if(this.isStopped) {
            int flags = this.memory.getByteAt(IORegisters.INTERRUPT_FLAGS);
            int ie = this.memory.getByteAt(IORegisters.INTERRUPT_ENABLE);

            this.checkInterrupts();
            this.gpu.tick(this.cycles);

            if((ie & flags & 0x1F) != 0) {
                this.isStopped = false;
            }

            // the GameBoy takes another 4 clock cycles to dispatch events when halted.
            this.cycles += 4;
            return;
        }

        // Set cycles to 0 every frame to prevent integer overflow.
        if(this.cycles >= (CPU.FREQUENCY / Display.FREQUENCY)) {
            this.cycles = 0;
        }

        this.synchronize();

        // check if the last instruction was ei.
        if(this.pendingEnableIME) {
            this.ime = true;
            this.pendingEnableIME = false;
        }

        // Check if there are any interrupts that need to be serviced.
        boolean shouldServiceInterrupts = (this.getInterruptFlag() & this.getInterruptEnable()) != 0;

        if(shouldServiceInterrupts) {
            this.checkInterrupts();
        } else {
            Instruction instruction = this.getInstruction(this.memory.getByteAt(this.PC++));
            this.execute(instruction);
            this.gpu.tick(this.cycles);
            this.timers.tick(instruction.getOpCycles());
        }

        this.updateObserver();
    }

    /**
     * The main loop. This ticks the CPU and runs forever.
     */
    void run() {
        this.isRunning = true;

        while(this.isRunning) {
            if(!this.breakpoints.isEmpty() && this.breakpoints.contains(this.PC)) {
                break;
            }

            this.tick();
        }
    }

    /**
     * Sets flags in the F register. If multiple flags should be set, then they should be bitwise or'd together.
     * Example: if Z and H should be set, then they should be passed in to this method like this: Z | H
     * @param flags The flags to check.
     */
    public void setFlags(int flags) {
        this.F = this.F | flags;
    }

    /**
     * Resets flags in the F register. If multiple flags should be reset, then they should be bitwise or'd together.
     * Example: if Z and H should be reset, then they should be passed in to this method like this: Z | H
     * @param flags The flags to check.
     */
    public void resetFlags(int flags) {
        this.F = this.F & ~flags;
    }

    /**
     * Keeps the CPU from running as fast as it can. This will keep the frame rate at 60 fps.
     */
    private void synchronize() {
        // Our target sleep time is the length in time the previous instruction took.
        long target = this.cyclesSinceLastSync * 18750 / CPU.FREQUENCY;

        // Get the current nanoseconds since 1970.
        long nanoseconds = Instant.now().getEpochSecond() * 18750;

        // The sleep duration is the previous instruction time plus how long it's been since we last synced.
        // We subtract the nanoseconds to see if the CPU is running too fast.
        // If sleepDuration is positive that means that the CPU is running incredibly fast (for GameBoy standards, anyway),
        //   and we need to slow it down by sleeping.
        long sleepDuration = target + this.lastSyncTime - nanoseconds;

        // There's a weird lag during vblank, so we can disable sleep during vblank
        //   and just process everything as fast as possible to mitigate the lag.
        // This is probably not the best solution, but it works.
        if(this.gpu.getMode() == GPU.Mode.VBLANK) {
            sleepDuration = 0;
        }

        // Check if sleepDuration is between zero and the time it takes to complete a whole frame.
        if(sleepDuration > 0 && sleepDuration < (Display.LCDC_PERIOD * 18750 / CPU.FREQUENCY)) {
            this.sleep(sleepDuration);

            // Need to keep track of how long it's been since we last synced.
            this.lastSyncTime += target;
        } else {
            // we need to know when we last synced.
            this.lastSyncTime = nanoseconds;
        }

        // We only care about the previous instruction, so we can set this to zero and it will be updated
        // after the next instruction is executed.
        this.cyclesSinceLastSync = 0;
    }

    /**
     * Sleep for {@code duration} nanoseconds.
     * @param duration Time in nanoseconds to sleep.
     */
    private void sleep(long duration) {
        try {
            if(duration > 999999) {
                Thread.sleep(0, 999999);
                this.sleep(duration - 999999);
            } else {
                Thread.sleep(0, (int)duration);
            }
        } catch(InterruptedException e) {
            // if sleep is interrupted, I don't think it matters.
        }
    }

    /**
     * Increments PC by specified amount.
     * @param n The amount to increment PC.
     */
    private void incrementPC(int n) {
        if(!this.haltBug) {
            this.PC += n;
        }
    }

    /**
     * Keep track of how many cycles have elapsed and also keeps track of how many cycles since the components were last synced.
     * @param n The amount of machine cycles to increment by.
     */
    private void incrementCycles(int n) {
        this.cycles += n;
        this.cyclesSinceLastSync += n;
    }

    /**
     * Check for the 5 different hardware interrupts and service them as needed. They are serviced in order of priority.
     * The priority is as follows:
     * VBLANK, LCD Status, Timer overflow, Serial input, JoyPad input
     */
    private void checkInterrupts() {
        // TODO: interrupts are not working properly. Run blargg on bgb and compare.
        int enabledInterrupts = this.getInterruptEnable() & this.getInterruptFlag();

        if((enabledInterrupts & Interrupts.VBLANK) == Interrupts.VBLANK) {
            this.serviceInterrupt(Interrupts.VBLANK, 0x40);
        } else if((enabledInterrupts & Interrupts.LCD_STAT) == Interrupts.LCD_STAT) {
            this.serviceInterrupt(Interrupts.LCD_STAT, 0x48);
        } else if((enabledInterrupts & Interrupts.TIMER) == Interrupts.TIMER) {
            this.serviceInterrupt(Interrupts.TIMER, 0x50);
        } else if((enabledInterrupts & Interrupts.SERIAL) == Interrupts.SERIAL) {
            this.serviceInterrupt(Interrupts.SERIAL, 0x58);
        } else if((enabledInterrupts & Interrupts.JOYPAD) == Interrupts.JOYPAD) {
            this.serviceInterrupt(Interrupts.JOYPAD, 0x60);
        }
    }

    /**
     * Servicing an interrupt disabled interrupts, resumes the CPU if it was stopped,
     * resets the interrupt bit that was serviced, resets the PC to a certain address
     * and consumes 5 cycles.
     * @param interrupt The {@link Interrupts interrupt} to service.
     * @param vector The address to reset to.
     */
    private void serviceInterrupt(int interrupt, int vector) {
        this.memory.setByteAt(IORegisters.INTERRUPT_FLAGS, this.getInterruptFlag() & ~interrupt);

        // The IME is really a flag saying "enable/disable jumps to interrupt vectors."
        if(this.ime) {
            this.rst(vector);
        }

        this.ime = false;
        this.isStopped = false;

        // The GameBoy takes 20 clock cycles to dispatch an interrupt
        this.incrementCycles(20);
    }

    /**
     * Fetches the current instruction.
     * @param opCode The op code to fetch.
     * @return The instruction to be executed.
     */
    private Instruction getInstruction(int opCode) {
        // Check if the op code is an 8-bit operation.
        if(opCode != 0xCB) {
            return this.instructions.get(opCode);
        } else {
            // The code is a 16-bit operation, so we need to combine the current op code and the next one in memory
            // to get the full op code.
            int code = this.combineBytes(opCode, this.memory.getByteAt(this.PC));
            return this.instructions.get(code);
        }
    }

    /**
     * Execute the {@link Instruction instruction}.
     * @param instruction The instruction to execute.
     */
    private void execute(Instruction instruction) {
        switch(instruction.getOpSize()) {
            case 0:
                instruction.getOperation().apply(null);
                break;
            case 1:
                instruction.getOperation().apply(this.getNextByte());
                break;
            case 2:
                instruction.getOperation().apply(this.getNext2Bytes());
                break;
        }

        this.incrementPC(instruction.getOpSize());
        this.incrementCycles(instruction.getOpCycles());
    }

    /**
     * Get the next byte from memory.
     * @return The next byte in memory as an array.
     */
    private int[] getNextByte() {
        return new int[] { this.memory.getByteAt(this.PC) };
    }

    /**
     * Get the next 2 bytes from memory. The GameBoy is Little Endian so the high byte and the low byte
     * are the second and first bytes from the current location, respectively.
     * @return The next byte in memory as an array.
     */
    private int[] getNext2Bytes() {
        return new int[] { this.memory.getByteAt(this.PC + 1), this.memory.getByteAt(this.PC) };
    }

    /**
     * Combines two bytes. Example, 0xC0 + 0xDE = 0xC0DE
     * @param highByte The value that the upper byte should equal.
     * @param lowByte The value that the lower byte should equal.
     * @return The sum of the bytes.
     */
    private int combineBytes(int highByte, int lowByte) {
        return (highByte << 8) + lowByte;
    }

    /**
     * Gets the value of the interrupt flag.
     * @return The value at memory address 0xFF0F
     */
    public int getInterruptFlag() {
        return this.memory.getByteAt(IORegisters.INTERRUPT_FLAGS);
    }

    /**
     * Gets the value of the interrupt enable.
     * @return The value at memory address 0xFFFF
     */
    public int getInterruptEnable() {
        return this.memory.getByteAt(IORegisters.INTERRUPT_ENABLE);
    }

    /**
     * Reads the state of the interrupt master enable (IME).
     * @return The state of the IME.
     */
    public boolean getIME() {
        return this.ime;
    }

    public void addBreakpoint(int breakpoint) {
        this.breakpoints.add(breakpoint);

        this.updateObserver();
    }

    public void removeBreakpoint(int breakpoint) {
        this.breakpoints.remove(breakpoint);

        this.updateObserver();
    }

    public ArrayList<Integer> getBreakpoints() {
        return this.breakpoints;
    }

    private void updateObserver() {
        if(this.observer != null) {
            this.observer.onNext(this.info.update(this));
        }
    }

    // TODO: Delete this if my version of daa works.
    /**
     * Checks if flags are set. If multiple flags should be queried, then they should bitwise or'd together.
     * Example: if Z and H should be reset, then they should be passed in to this method like this: Z | H
     * @param flags The flags to check.
     * @return True if the all flags are set, false if at least one flag is not set.
     */
    public boolean areFlagsSet(int flags) {
        return (this.F & flags) == flags;
    }

    // region Instruction helper methods
    /**
     * Increments a {@code value} by 1 and sets the necessary flags.
     * @param value The value to increment.
     * @return The incremented value.
     */
    private int increment(int value) {
        // FLAG_HALF - set if there was a carry from the 3rd bit to the 4th bit, otherwise reset.
        if((value & 0x0F) == 0x0F) {
            this.setFlags(FLAG_HALF);
        } else {
            this.resetFlags(FLAG_HALF);
        }

        // increment value by 1 and get the first 8 bits
        value = (value + 1) & 0xFF;

        // FLAG_SUB - reset
        this.resetFlags(FLAG_SUB);

        // FLAG_ZERO - set if result is 0, otherwise reset
        if(value == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        return value;
    }

    /**
     * Decrements a {@code value} by 1 and sets the necessary flags.
     * @param value The value to decrement.
     * @return The decremented value.
     */
    private int decrement(int value) {
        // decrement value by 1 and get the first 8 bits
        int result = (value - 1) & 0xFF;

        // FLAG_HALF - set if there was a carry (borrow) from the 4th bit to the 3rd bit, otherwise reset.
        // invert value's bits, xor with (value - 1) then find out what the 4th bit is with (& 0x10).
        // If it equals zero, then there was a carry.
        if((((~value) ^ (result)) & 0x10) == 0) {
            this.setFlags(FLAG_HALF);
        } else {
            this.resetFlags(FLAG_HALF);
        }

        value = result;

        // FLAG_SUB - set
        this.setFlags(FLAG_SUB);

        // FLAG_ZERO - set if result is 0, otherwise reset
        if(value == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        return value;
    }

    /**
     * Adds two 16-bit numbers together and sets the necessary flags.
     * @param num1 The first number.
     * @param num2 The second number.
     * @return The 16-bit result of the addition.
     */
    private int add16Bit(int num1, int num2) {
        int result = num1 + num2;

        if((result & 0xFFFF0000) != 0) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        if(((num1 & 0x0F00) + (num2 & 0x0F00)) > 0x0F00) {
            this.setFlags(FLAG_HALF);
        } else {
            this.resetFlags(FLAG_HALF);
        }

        this.resetFlags(FLAG_SUB);
        return result & 0xFFFF;
    }

    /**
     * Adds two 8-bit numbers together and sets the necessary flags.
     * @param num1 The first number.
     * @param num2 The second number.
     * @return The 8-bit result of the addition.
     */
    private int add8Bit(int num1, int num2) {
        int result = num1 + num2;

        if((result & 0xFF00) != 0) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        if((result & 0xFF) != 0) {
            this.resetFlags(FLAG_ZERO);
        } else {
            this.setFlags(FLAG_ZERO);
        }

        if(((num1 & 0x0F) + (num2 & 0x0F)) > 0x0F) {
            this.setFlags(FLAG_HALF);
        } else {
            this.resetFlags(FLAG_HALF);
        }

        this.resetFlags(FLAG_SUB);
        return result & 0xFF;
    }

    /**
     * Adds two 8-bit numbers with the current value of the carry flag and sets the necessary flags.
     * @param num1 The first number.
     * @param num2 The second number.
     * @return The 8-bit result of the addition.
     */
    private int adc(int num1, int num2) {
        int carry = (this.getF() & FLAG_CARRY) >> 4;
        int result = num1 + num2 + carry;

        if((result & 0xFF00) != 0) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        if((result & 0xFF) != 0) {
            this.resetFlags(FLAG_ZERO);
        } else {
            this.setFlags(FLAG_ZERO);
        }

        if(((num1 & 0x0F) + (num2 & 0x0F) + carry) > 0x0F) {
            this.setFlags(FLAG_HALF);
        } else {
            this.resetFlags(FLAG_HALF);
        }

        this.resetFlags(FLAG_SUB);
        return result & 0xFF;
    }

    /**
     * Subtracts {@code value} from A and sets the necessary flags.
     * @param value The value to subtract from A.
     * @return The 8-bit result of the subtraction.
     */
    private int sub(int value) {
        if(value > this.A) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        if((value & 0x0F) > (this.A & 0x0F)) {
            this.setFlags(FLAG_HALF);
        } else {
            this.resetFlags(FLAG_HALF);
        }

        int result = (this.A - value) & 0xFF;

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        this.setFlags(FLAG_SUB);

        return result;
    }

    /**
     * Subtracts {@code value} and the current value of the carry flag from A and sets the necessary flags.
     * @param value The value to subtract from A.
     * @return The 8-bit result of the subtraction.
     */
    private int sbc(int value) {
        int result = this.A - value;
        result = result - ((this.getF() & FLAG_CARRY) >> 4);

        if(result < 0) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        result &= 0xFF;

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        if(((result ^ value ^ this.A) & 0x10) == 0x10) {
            this.setFlags(FLAG_HALF);
        } else {
            this.resetFlags(FLAG_HALF);
        }

        this.setFlags(FLAG_SUB);

        return result;
    }

    /**
     * Shifts {@code value} left, sets the carry flag and the 0th bit to the value of the 7th bit. Sets the necessary flags.
     * @param value The value to shift.
     * @return The shifted value.
     */
    private int rlc(int value) {
        // check the 7th bit of the value.
        if((value & 0x80) == 0x80) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        // subtraction and half carry flags are reset.
        this.resetFlags(FLAG_SUB | FLAG_HALF);

        // shift A left by 1 bit, change the 0th bit to whatever the carry flag was.
        int result = (((value << 1) & (~0x01)) | ((value & 0x80) >> 7)) & 0xFF;

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        return result;
    }

    /**
     * Shifts {@code value} right, sets the carry flag and the 7th bit to the value of the 0th bit. Sets the necessary flags.
     * @param value The value to shift.
     * @return The shifted value.
     */
    private int rrc(int value) {
        // check the 0th bit of the value.
        if((value & 0x01) == 0x01) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        // subtraction and half carry flags are reset.
        this.resetFlags(FLAG_SUB | FLAG_HALF);

        // shift A left by 1 bit, change the 0th bit to whatever the carry flag was.
        // (((0x01 >> 1) & (~0x01)) | ((0x01 & 0x01) << 7)) & 0xFF
        int result = (((value >> 1) & (~0x01)) | ((value & 0x01) << 7)) & 0xFF;

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        return result;
    }

    /**
     * Shifts {@code value} left, sets the 0th bit to the value of the carry flag. Sets the necessary flags.
     * @param value The value to shift.
     * @return The shifted value.
     */
    private int rl(int value) {
        int carry = this.getF() & FLAG_CARRY;

        if((value & 0x80) == 0x80) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        int result = ((value << 1) | carry) & 0xFF;

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        return result;
    }

    /**
     * Shifts {@code value} right, sets the 7th bit to the value of the carry flag. Sets the necessary flags.
     * @param value The value to shift.
     * @return The shifted value.
     */
    private int rr(int value) {
        int carry = this.getF() & FLAG_CARRY;

        if((value & 0x01) == 0x01) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        int result = ((value >> 1) | (carry << 7)) & 0xFF;

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        return result;
    }

    /**
     * Shifts {@code value} left, sets the carry flag to the value of the 7th bit, resets the 0th bit. Sets the necessary flags.
     * @param value The value to shift.
     * @return The shifted value.
     */
    private int sla(int value) {
        if((value & 0x80) == 0x80) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        int result = (value << 1) & 0xFF;

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        this.resetFlags(FLAG_SUB | FLAG_HALF);

        return result;
    }

    /**
     * Shifts {@code value} right, sets the carry flag to the value of the 0th bit, 7th bit is unchanged. Sets the necessary flags.
     * @param value The value to shift.
     * @return The shifted value.
     */
    private int sra(int value) {
        if((value & 0x01) == 0x01) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        int result = ((value >> 1) | (value & 0x80)) & 0xFF;

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        this.resetFlags(FLAG_SUB | FLAG_HALF);

        return result;
    }

    /**
     * Swaps the low and high nibbles.
     * @param value The value to swap.
     * @return The swapped value.
     */
    private int swap(int value) {
        int result = ((value & 0x0F) << 4) + (value >> 4);

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        this.resetFlags(FLAG_SUB | FLAG_HALF | FLAG_CARRY);
        return result;
    }

    /**
     * Shifts {@code value} right, sets the carry flag to the value of the 0th bit, resets the 7th bit. Sets the necessary flags.
     * @param value The value to shift.
     * @return The shifted value.
     */
    private int srl(int value) {
        if((value & 0x01) == 0x01) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        int result = (value >> 1) & 0xFF;

        if(result == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        this.resetFlags(FLAG_SUB | FLAG_HALF);

        return result;
    }

    /**
     * Copies the compliment of the specified bit at {@code position}. Sets the necessary flags.
     * @param position The bit to operate on.
     * @param value The value to operate on.
     */
    private void bit(int position, int value) {
        int result = ~(value >> position) & 0x01;

        if(result == 1) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        this.setFlags(FLAG_HALF);
        this.resetFlags(FLAG_SUB);
    }

    /**
     * Resets the bit at {@code position}.
     * @param position The bit to operate on.
     * @param value The value to operate on.
     * @return The value with the specified bit reset.
     */
    private int res(int position, int value) {
        return (value & ~(0x01 << position)) & 0xFF;
    }

    /**
     * Sets the bit at {@code position}.
     * @param position The bit to operate on.
     * @param value The value to operate on.
     * @return The value with the specified bit set.
     */
    private int set(int position, int value) {
        return ((value & ~(0x01 << position)) | (1 << position)) & 0xFF;
    }

    /**
     * Performs a bitwise and operation on A and {@code value}.
     * @param value The value to bitwise and with A
     */
    private void and(int value) {
        this.A &= value;

        if(this.A == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        this.resetFlags(FLAG_SUB | FLAG_CARRY);
        this.setFlags(FLAG_HALF);
    }

    /**
     * Performs a bitwise xor operation on A and {@code value}.
     * @param value The value to bitwise xor with A
     */
    private void xor(int value) {
        this.A ^= value;

        if(this.A == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        this.resetFlags(FLAG_SUB | FLAG_HALF | FLAG_CARRY);
    }

    /**
     * Performs a bitwise or operation on A and {@code value}.
     * @param value The value to bitwise or with A
     */
    private void or(int value) {
        this.A |= value;

        if(this.A == 0) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        this.resetFlags(FLAG_SUB | FLAG_HALF | FLAG_CARRY);
    }

    /**
     * Compares the contents of A and {@code value} and sets flags if they are equal.
     * @param value The value to bitwise and with A
     */
    private void cp(int value) {
        if(this.A == value) {
            this.setFlags(FLAG_ZERO);
        } else {
            this.resetFlags(FLAG_ZERO);
        }

        if((this.A & 0x0F) < (value & 0x0F)) {
            this.setFlags(FLAG_HALF);
        } else {
            this.resetFlags(FLAG_HALF);
        }

        if(this.A < value) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        this.setFlags(FLAG_SUB);
    }

    /**
     * Push PC onto stack and reset PC to {@code address}.
     * @param address The address to jump to.
     */
    private void rst(int address) {
        this.memory.setByteAt(this.SP - 1, (this.PC >> 8) & 0xFF);
        this.memory.setByteAt(this.SP - 2, this.PC & 0xFF);
        this.SP -= 2;
        this.PC = address;
    }
    // endregion

    // region Instructions
    /**
     * OP codes
     * 0x00, 0x40, 0x49, 0x52, 0x5B, 0x64, 0x6D, 0x7F,
     * 0xD3, 0xDB, 0xDD, 0xE3, 0xE4, 0xEB, 0xEC, 0xED,
     * 0xF4, 0xFC, 0xFD
     * No operation.
     * @param ops unused
     */
    Void nop(int[] ops) {
        // nothing.
        return null;
    }

    /**
     * OP code 0x01 - Load immediate 2 bytes into BC.
     * @param ops Immediate 2 bytes
     */
    Void ld_bc_xx(int[] ops) {
        this.setBC(this.combineBytes(ops[0], ops[1]));
        return null;
    }

    /**
     * OP code 0x02 - Load value of A into memory address at BC.
     * @param ops unused
     */
    Void ld_bcp_a(int[] ops) {
        this.memory.setByteAt(this.getBC(), this.A);
        return null;
    }

    /**
     * OP code 0x03 - Increment BC.
     * @param ops unused
     */
    Void inc_bc(int[] ops) {
        // increment BC by 1 and get the first 8 bits
        this.setBC((this.getBC() + 1) & 0xFFFF);
        return null;
    }

    /**
     * OP code 0x04 - Increment B.
     * @param ops unused
     */
    Void inc_b(int[] ops) {
        this.B = this.increment(this.B);
        return null;
    }

    /**
     * OP code 0x05 - Decrement B.
     * @param ops unused
     */
    Void dec_b(int[] ops) {
        this.B = this.decrement(this.B);
        return null;
    }

    /**
     * OP code 0x06 - Load immediate byte into B.
     * @param ops Immediate 1 byte.
     */
    Void ld_b_x(int[] ops) {
        this.B = ops[0];
        return null;
    }

    /**
     * OP code 0x07 - Shift A left by 1 bit. Carry flag is set to the 7th bit of A.
     * @param ops unused
     */
    Void rlca(int[] ops) {
        int carry = (this.A & 0x80) >> 7;

        if(carry == 1) {
            this.setFlags(FLAG_CARRY);
        }

        // shift bit left by 1 and get the first 8 bits
        this.A = (this.A << 1) & 0xFF;

        // set the 0th bit to whatever was at the 7th bit.
        this.A = this.A | carry;

        this.resetFlags(FLAG_ZERO | FLAG_SUB | FLAG_HALF);
        return null;
    }

    /**
     * OP code 0x08 - Load value of SP into address at xx.
     * @param ops Immediate 2 bytes
     */
    Void ld_xxp_sp(int[] ops) {
        this.memory.setByteAt(this.combineBytes(ops[0], ops[1]), this.SP);
        return null;
    }

    /**
     * OP code 0x09 - Add the value of BC to HL.
     * @param ops unused
     */
    Void add_hl_bc(int[] ops) {
        this.setHL(this.add16Bit(this.getHL(), this.getBC()));
        return null;
    }

    /**
     * OP code 0x0A - Load value at memory address BC into A.
     * @param ops unused.
     */
    Void ld_a_bcp(int[] ops) {
        this.A = this.memory.getByteAt(this.getBC());
        return null;
    }

    /**
     * OP code 0x0B - Decrement the value of BC.
     * @param ops unused.
     */
    Void dec_bc(int[] ops) {
        this.setBC((this.getBC() - 1) & 0xFFFF);
        return null;
    }

    /**
     * OP code 0x0C - Increment the value of C.
     * @param ops unused.
     */
    Void inc_c(int[] ops) {
        this.C = this.increment(this.C);
        return null;
    }

    /**
     * OP code 0x0D - Decrement the value of C.
     * @param ops unused.
     */
    Void dec_c(int[] ops) {
        this.C = this.decrement(this.C);
        return null;
    }

    /**
     * OP code 0x0E - Load immediate byte into C.
     * @param ops Immediate 1 byte.
     */
    Void ld_c_x(int[] ops) {
        this.C = ops[0];
        return null;
    }

    /**
     * OP code 0x0F - Shift A right by 1 bit. Carry flag is set to the 0th bit of A.
     * @param ops unused.
     */
    Void rrca(int[] ops) {
        int carry = this.A & 0x01;

        if(carry == 0x01) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        // set the 7th bit to whatever was at the 0th bit.
        this.A = (((this.A >> 1) & (~0x80)) | (carry << 7)) & 0xFF;

        this.resetFlags(FLAG_ZERO | FLAG_SUB | FLAG_HALF);
        return null;
    }

    /**
     * OP code 0x10 - Enter CPU very low power mode.
     * - Execution of a STOP instruction stops both the system clock and oscillator circuit.
     * - STOP mode is entered, and the LCD controller also stops.
     * - However, the status of internal RAM register ports remains unchanged.
     * - STOP mode can be canceled by a reset signal.
     * - If the RESET terminal goes LOW in STOP mode, it becomes that of a normal reset status.
     * - The following conditions should be met before a STOP instruction is executed and STOP mode is entered:
     *   > All interrupt-enable (IE) flags are reset.
     *   > Input to P10 - P13 is LOW for all.
     * @param ops unused.
     */
    Void stop(int[] ops) {
        this.isStopped = true;
//        this.memory.setByteAt(IORegisters.INTERRUPT_ENABLE, 0x00);
        // TODO: set P10 - P13 low
        return null;
    }

    /**
     * OP code 0x11 - Load immediate 2 bytes into DE.
     * @param ops Immediate 2 bytes
     */
    Void ld_de_xx(int[] ops) {
        this.setDE(this.combineBytes(ops[0], ops[1]));
        return null;
    }

    /**
     * OP code 0x12 - Load the value of A in the memory address pointed to by DE.
     * @param ops unused.
     */
    Void ld_dep_a(int[] ops) {
        this.memory.setByteAt(this.getDE(), this.A);
        return null;
    }

    /**
     * OP code 0x13 - Increment DE.
     * @param ops unused
     */
    Void inc_de(int[] ops) {
        this.setDE((this.getDE() + 1) & 0xFFFF);
        return null;
    }

    /**
     * OP code 0x14 - Increment the value of D.
     * @param ops unused.
     */
    Void inc_d(int[] ops) {
        this.D = this.increment(this.D);
        return null;
    }

    /**
     * OP code 0x15 - Decrement the value of D.
     * @param ops unused.
     */
    Void dec_d(int[] ops) {
        this.D = this.decrement(this.D);
        return null;
    }

    /**
     * OP code 0x16 - Load immediate byte into D.
     * @param ops Immediate 1 byte.
     */
    Void ld_d_x(int[] ops) {
        this.D = ops[0];
        return null;
    }

    /**
     * OP code 0x17 - Shift A left by 1. The 0th bit of A is set to the value of the CARRY flag. CARRY flag is set to the 7th bit of A.
     * @param ops  unused.
     */
    Void rla(int[] ops) {
        // get current state of carry flag.
        int carry = (this.F & FLAG_CARRY) >> 4;

        // check the 7th bit of A.
        if((this.A & 0x80) == 0x80) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        // shift A left by 1 bit, change the 0th bit to whatever the carry flag was.
        this.A = (((this.A << 1) & (~0x01)) | carry) & 0xFF;

        // all other flags are reset.
        this.resetFlags(FLAG_ZERO | FLAG_SUB | FLAG_HALF);
        return null;
    }

    /**
     * OP code 0x18 - Increments PC by the amount of the next byte (between -128 and 127)
     * @param ops Immediate 1 byte.
     */
    Void jr_x(int[] ops) {
        this.incrementPC((byte)ops[0]);

        // TODO: do I need to do this instead?
        /*if(ops[0] > 126) {
            this.incrementPC((ops[0] + 1) - 127);
        } else {
            this.incrementPC(ops[0] - 127);
        }*/

        return null;
    }

    /**
     * OP code 0x19 - Add HL and DE and store the result in HL.
     * @param ops unused.
     */
    Void add_hl_de(int[] ops) {
        this.setHL(this.add16Bit(this.getHL(), this.getDE()));
        return null;
    }

    /**
     * OP code 0x1A - Load the value memory address pointed to by DE into A.
     * @param ops unused.
     */
    Void ld_a_dep(int[] ops) {
        this.A = this.memory.getByteAt(this.getDE());
        return null;
    }

    /**
     * OP code 0x1B - Decrement DE by 1.
     * @param ops unused.
     */
    Void dec_de(int[] ops) {
        this.setDE((this.getDE() - 1) & 0xFFFF);
        return null;
    }

    /**
     * OP code 0x1C - Increment E by 1.
     * @param ops unused.
     */
    Void inc_e(int[] ops) {
        this.E = this.increment(this.E);
        return null;
    }

    /**
     * OP code 0x1D - Decrement E by 1.
     * @param ops unused.
     */
    Void dec_e(int[] ops) {
        this.E = this.decrement(this.E);
        return null;
    }

    /**
     * OP code 0x1E - Load immediate byte into E.
     * @param ops Immediate 1 byte.
     */
    Void ld_e_x(int[] ops) {
        this.E = ops[0];
        return null;
    }

    /**
     * OP code 0x1F - Shift A right by 1. The 7th bit of A is set to the value of the CARRY flag. CARRY flag is set the 0th bit of A.
     * @param ops unsued.
     */
    Void rra(int[] ops) {
        // get current state of carry flag.
        int carry = (this.F & FLAG_CARRY) >> 4;

        // check the 0th bit of A.
        if((this.A & 0x01) == 0x01) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        // shift A right by 1 bit, change the 7th bit to whatever the carry flag was.
        this.A = (((this.A >> 1) & (~0x80)) | (carry << 7)) & 0xFF;

        // all other flags are reset.
        this.resetFlags(FLAG_ZERO | FLAG_SUB | FLAG_HALF);
        return null;
    }

    /**
     * OP code 0x20 - Jump to given address relative to the current address if the zero flag is not set.
     * @param ops The 8-bit offset
     */
    Void jr_nz_x(int[] ops) {
        if((this.F & FLAG_ZERO) != FLAG_ZERO) {
            this.incrementPC((byte)ops[0]);

            // TODO: do I need to do this instead?
            /*if(ops[0] > 126) {
                this.incrementPC((ops[0] + 1) - 127);
            } else {
                this.incrementPC(ops[0] - 127);
            }*/

            this.incrementCycles(12);
        } else {
            this.incrementCycles(8);
        }

        return null;
    }

    /**
     * OP code 0x21 - Load immediate 2 bytes into HL register.
     * @param ops Immediate 2 bytes.
     */
    Void ld_hl_xx(int[] ops) {
        this.setHL(this.combineBytes(ops[0], ops[1]));
        return null;
    }

    /**
     * OP code 0x22 - Load A into the memory address pointed to by HL and then increment HL by 1.
     * @param ops unused.
     */
    Void ldi_hlp_a(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.A);
        this.setHL(this.getHL() + 1);
        return null;
    }

    /**
     * OP code 0x23 - Increment HL by 1.
     * @param ops unused.
     */
    Void inc_hl(int[] ops) {
        this.setHL((this.getHL() + 1) & 0xFFFF);
        return null;
    }

    /**
     * OP code 0x24 - Increment H by 1.
     * @param ops unused.
     */
    Void inc_h(int[] ops) {
        this.H = this.increment(this.H);
        return null;
    }

    /**
     * OP code 0x25 - Decrement H by 1.
     * @param ops unused.
     */
    Void dec_h(int[] ops) {
        this.H = this.decrement(this.H);
        return null;
    }

    /**
     * OP code 0x26 - Load immediate byte into H.
     * @param ops Immediate 1 byte.
     */
    Void ld_h_x(int[] ops) {
        this.H = ops[0];
        return null;
    }

    /**
     * OP code 0x27 - When performing addition and subtraction, binary coded decimal (BCD) representation is
     * used to set the contents of register A to a BCD number.
     * @param ops unused
     */
    Void daa(int[] ops) {
        boolean sub = (this.F & CPU.FLAG_SUB) == CPU.FLAG_SUB;
        boolean half = (this.F & CPU.FLAG_HALF) == CPU.FLAG_HALF;
        boolean carry = (this.F & CPU.FLAG_CARRY) == CPU.FLAG_CARRY;

        // after an addition, adjust A if a HALF_CARRY or CARRY occurred or if the result is out of bounds.
        if(!sub) {
            if(carry || this.A > 0x99) {
                this.A = (this.A + 0x60) & 0xFF;
                this.setFlags(CPU.FLAG_CARRY);
            }

            if(half || (this.A & 0x0F) > 0x09) {
                this.A = (this.A + 0x06) & 0xFF;
            }
        } else {
            // after a subtraction, only adjust if a HALF_CARRY or CARRY occurred.
            if(carry) {
                this.A = (this.A - 0x60) & 0xFF;
            }

            if(half) {
                this.A = (this.A - 0x06) & 0xFF;
            }
        }

        // set zero flag if A register is zero.
        if(this.A == 0) {
            this.setFlags(CPU.FLAG_ZERO);
        } else {
            this.resetFlags(CPU.FLAG_ZERO);
        }

        // half carry always reset.
        this.resetFlags(CPU.FLAG_HALF);

        return null;
    }

    /**
     * OP code 0x28 - Jump to given address relative to the current address if the zero flag is set.
     * @param ops The 8-bit offset
     */
    Void jr_z_x(int[] ops) {
        if((this.F & FLAG_ZERO) == FLAG_ZERO) {
            this.incrementPC((byte)ops[0]);

            // TODO: do I need to do this instead?
            /*if(ops[0] > 126) {
                this.incrementPC((ops[0] + 1) - 127);
            } else {
                this.incrementPC(ops[0] - 127);
            }*/

            this.incrementCycles(12);
        } else {
            this.incrementCycles(8);
        }

        return null;
    }

    /**
     * OP code 0x29 - Add HL to HL and store the value in HL.
     * @param ops unused.
     */
    Void add_hl_hl(int[] ops) {
        this.setHL(this.add16Bit(this.getHL(), this.getHL()));
        return null;
    }

    /**
     * OP code 0x2A - Load the value in memory pointed to by HL into A, then increment HL by 1.
     * @param ops unused.
     */
    Void ldi_a_hlp(int[] ops) {
        this.A = this.memory.getByteAt(this.getHL());
        this.setHL(this.getHL() + 1);
        return null;
    }

    /**
     * OP code 0x2B - Decrement HL by 1.
     * @param ops unused.
     */
    Void dec_hl(int[] ops) {
        this.setHL((this.getHL() - 1) & 0xFFFF);
        return null;
    }

    /**
     * OP code 0x2C - Increment L by 1.
     * @param ops unused.
     */
    Void inc_l(int[] ops) {
        this.L = this.increment(this.L);
        return null;
    }

    /**
     * OP code 0x2D - Decrement L by 1.
     * @param ops unused.
     */
    Void dec_l(int[] ops) {
        this.L = this.decrement(this.L);
        return null;
    }

    /**
     * OP code 0x2E - Load immediate byte into L.
     * @param ops Immediate 1 byte.
     */
    Void ld_l_x(int[] ops) {
        this.L = ops[0];
        return null;
    }

    /**
     * OP code 0x2F - Take the one's compliment of A and store the result in A.
     * @param ops unused.
     */
    Void cpl(int[] ops) {
        this.A = (~this.A) & 0xFF;
        this.setFlags(FLAG_SUB | FLAG_HALF);
        return null;
    }

    /**
     * OP code 0x30 - Jump to given address relative to the current address if the carry flag is not set.
     * @param ops The 8-bit offset
     */
    Void jr_nc_x(int[] ops) {
        if((this.F & FLAG_CARRY) != FLAG_CARRY) {
            this.incrementPC((byte)ops[0]);

            // TODO: do I need to do this instead?
            /*if(ops[0] > 126) {
                this.incrementPC((ops[0] + 1) - 127);
            } else {
                this.incrementPC(ops[0] - 127);
            }*/

            this.incrementCycles(12);
        } else {
            this.incrementCycles(8);
        }

        return null;
    }

    /**
     * OP code 0x31 - Load immediate 2 bytes into SP.
     * @param ops Immediate 2 bytes
     */
    Void ld_sp_xx(int[] ops) {
        this.setSP(this.combineBytes(ops[0], ops[1]));
        return null;
    }

    /**
     * OP code 0x32 - Load A into the memory address pointed to by HL and then decrement HL by 1.
     * @param ops unused.
     */
    Void ldd_hlp_a(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.A);
        this.setHL(this.getHL() - 1);
        return null;
    }

    /**
     * OP code 0x33 - Increment SP by 1.
     * @param ops unused.
     */
    Void inc_sp(int[] ops) {
        this.SP += 1;
        return null;
    }

    /**
     * OP code 0x34 - Increment the value in memory pointed to by HL by 1.
     * @param ops unused.
     */
    Void inc_hlp(int[] ops) {
        int value = this.increment(this.memory.getByteAt(this.getHL()));
        this.memory.setByteAt(this.getHL(), value);
        return null;
    }

    /**
     * OP code 0x35 - Decrement the value in memory pointed to by HL by 1.
     * @param ops unused.
     */
    Void dec_hlp(int[] ops) {
        int value = this.decrement(this.memory.getByteAt(this.getHL()));
        this.memory.setByteAt(this.getHL(), value);
        return null;
    }

    /**
     * OP code 0x36 - Load immediate byte into memory address pointed to by HL.
     * @param ops Immediate 1 byte.
     */
    Void ld_hlp_x(int[] ops) {
        this.memory.setByteAt(this.getHL(), ops[0]);
        return null;
    }

    /**
     * OP code 0x37 - Sets carry flag, resets half carry and subtraction flags.
     * @param ops unused.
     */
    Void scf(int[] ops) {
        this.setFlags(FLAG_CARRY);
        this.resetFlags(FLAG_SUB | FLAG_HALF);
        return null;
    }

    /**
     * OP code 0x38 - Jump to given address relative to the current address if the carry flag is set.
     * @param ops The 8-bit offset
     */
    Void jr_c_x(int[] ops) {
        if((this.F & FLAG_CARRY) == FLAG_CARRY) {
            this.incrementPC((byte)ops[0]);

            // TODO: do I need to do this instead?
            /*if(ops[0] > 126) {
                this.incrementPC((ops[0] + 1) - 127);
            } else {
                this.incrementPC(ops[0] - 127);
            }*/

            this.incrementCycles(12);
        } else {
            this.incrementCycles(8);
        }

        return null;
    }

    /**
     * OP code 0x39 - Add HL and SP and store the result in HL.
     * @param ops unused.
     */
    Void add_hl_sp(int[] ops) {
        this.setHL(this.add16Bit(this.getHL(), this.getSP()));
        return null;
    }

    /**
     * OP code 0x3A - Load the value in memory pointed to by HL into A, then decrement HL by 1.
     * @param ops unused.
     */
    Void ldd_a_hlp(int[] ops) {
        this.A = this.memory.getByteAt(this.getHL());
        this.setHL(this.getHL() - 1);
        return null;
    }

    /**
     * OP code 0x3B - Decrement SP by 1.
     * @param ops unused.
     */
    Void dec_sp(int[] ops) {
        this.SP -= 1;
        return null;
    }

    /**
     * OP code 0x3C - Increment A by 1.
     * @param ops unused.
     */
    Void inc_a(int[] ops) {
        this.A = this.increment(this.A);
        return null;
    }

    /**
     * OP code 0x3D - Decrement A by 1.
     * @param ops unused.
     */
    Void dec_a(int[] ops) {
        this.A = this.decrement(this.A);
        return null;
    }

    /**
     * OP code 0x3E - Load immediate byte into A.
     * @param ops Immediate 1 byte.
     */
    Void ld_a_x(int[] ops) {
        this.A = ops[0];
        return null;
    }

    /**
     * OP code 0x3F - Toggle the carry flag.
     * @param ops unused.
     */
    Void ccf(int[] ops) {
        int carry = ((~this.getF() & 0xFF) & FLAG_CARRY) >> 4;

        if(carry == 1) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        return null;
    }

    /**
     * OP code 0x41 - Load C into B.
     * @param ops unused.
     */
    Void ld_b_c(int[] ops) {
        this.B = this.C;
        return null;
    }

    /**
     * OP code 0x42 - Load D into B.
     * @param ops unused.
     */
    Void ld_b_d(int[] ops) {
        this.B = this.D;
        return null;
    }

    /**
     * OP code 0x43 - Load E into B.
     * @param ops unused.
     */
    Void ld_b_e(int[] ops) {
        this.B = this.E;
        return null;
    }

    /**
     * OP code 0x44 - Load H into B.
     * @param ops unused.
     */
    Void ld_b_h(int[] ops) {
        this.B = this.H;
        return null;
    }

    /**
     * OP code 0x45 - Load L into B.
     * @param ops unused.
     */
    Void ld_b_l(int[] ops) {
        this.B = this.L;
        return null;
    }

    /**
     * OP code 0x46 - Load value at memory address specified by HL into B.
     * @param ops unused.
     */
    Void ld_b_hlp(int[] ops) {
        this.B = this.memory.getByteAt(this.getHL());
        return null;
    }

    /**
     * OP code 0x47 - Load A into B.
     * @param ops unused.
     */
    Void ld_b_a(int[] ops) {
        this.B = this.A;
        return null;
    }

    /**
     * OP code 0x48 - Load B into C.
     * @param ops unused.
     */
    Void ld_c_b(int[] ops) {
        this.C = this.B;
        return null;
    }

    /**
     * OP code 0x4A - Load D into C.
     * @param ops unused.
     */
    Void ld_c_d(int[] ops) {
        this.C = this.D;
        return null;
    }

    /**
     * OP code 0x4B - Load E into C.
     * @param ops unused.
     */
    Void ld_c_e(int[] ops) {
        this.C = this.E;
        return null;
    }

    /**
     * OP code 0x4C - Load H into C.
     * @param ops unused.
     */
    Void ld_c_h(int[] ops) {
        this.C = this.H;
        return null;
    }

    /**
     * OP code 0x4D - Load L into C.
     * @param ops unused.
     */
    Void ld_c_l(int[] ops) {
        this.C = this.L;
        return null;
    }

    /**
     * OP code 0x4E - Load value at memory address specified by HL into C.
     * @param ops unused.
     */
    Void ld_c_hlp(int[] ops) {
        this.C = this.memory.getByteAt(this.getHL());
        return null;
    }

    /**
     * OP code 0x4F - Load A into C.
     * @param ops unused.
     */
    Void ld_c_a(int[] ops) {
        this.C = this.A;
        return null;
    }

    /**
     * OP code 0x50 - Load B into D.
     * @param ops unused.
     */
    Void ld_d_b(int[] ops) {
        this.D = this.B;
        return null;
    }

    /**
     * OP code 0x51 - Load C into D.
     * @param ops unused.
     */
    Void ld_d_c(int[] ops) {
        this.D = this.C;
        return null;
    }

    /**
     * OP code 0x53 - Load E into D.
     * @param ops unused.
     */
    Void ld_d_e(int[] ops) {
        this.D = this.E;
        return null;
    }

    /**
     * OP code 0x54 - Load H into D.
     * @param ops unused.
     */
    Void ld_d_h(int[] ops) {
        this.D = this.H;
        return null;
    }

    /**
     * OP code 0x55 - Load L into D.
     * @param ops unused.
     */
    Void ld_d_l(int[] ops) {
        this.D = this.L;
        return null;
    }

    /**
     * OP code 0x56 - Load value at memory address specified by HL into D.
     * @param ops unused.
     */
    Void ld_d_hlp(int[] ops) {
        this.D = this.memory.getByteAt(this.getHL());
        return null;
    }

    /**
     * OP code 0x57 - Load A into D.
     * @param ops unused.
     */
    Void ld_d_a(int[] ops) {
        this.D = this.A;
        return null;
    }

    /**
     * OP code 0x58 - Load B into E.
     * @param ops unused.
     */
    Void ld_e_b(int[] ops) {
        this.E = this.B;
        return null;
    }

    /**
     * OP code 0x59 - Load C into E.
     * @param ops unused.
     */
    Void ld_e_c(int[] ops) {
        this.nop(null);
        return null;
    }

    /**
     * OP code 0x5A - Load D into E.
     * @param ops unused.
     */
    Void ld_e_d(int[] ops) {
        this.E = this.D;
        return null;
    }

    /**
     * OP code 0x5C - Load H into E.
     * @param ops unused.
     */
    Void ld_e_h(int[] ops) {
        this.E = this.H;
        return null;
    }

    /**
     * OP code 0x5D - Load L into E.
     * @param ops unused.
     */
    Void ld_e_l(int[] ops) {
        this.E = this.L;
        return null;
    }

    /**
     * OP code 0x5E - Load value at memory address specified by HL into E.
     * @param ops unused.
     */
    Void ld_e_hlp(int[] ops) {
        this.E = this.memory.getByteAt(this.getHL());
        return null;
    }

    /**
     * OP code 0x5F - Load A into E.
     * @param ops unused.
     */
    Void ld_e_a(int[] ops) {
        this.E = this.A;
        return null;
    }

    /**
     * OP code 0x60 - Load B into H.
     * @param ops unused.
     */
    Void ld_h_b(int[] ops) {
        this.H = this.B;
        return null;
    }

    /**
     * OP code 0x61 - Load C into H.
     * @param ops unused.
     */
    Void ld_h_c(int[] ops) {
        this.H = this.C;
        return null;
    }

    /**
     * OP code 0x62 - Load D into H.
     * @param ops unused.
     */
    Void ld_h_d(int[] ops) {
        this.H = this.D;
        return null;
    }

    /**
     * OP code 0x63 - Load E into H.
     * @param ops unused.
     */
    Void ld_h_e(int[] ops) {
        this.H = this.E;
        return null;
    }

    /**
     * OP code 0x65 - Load L into H.
     * @param ops unused.
     */
    Void ld_h_l(int[] ops) {
        this.H = this.L;
        return null;
    }

    /**
     * OP code 0x66 - Load value at memory address specified by HL into H.
     * @param ops unused.
     */
    Void ld_h_hlp(int[] ops) {
        this.H = this.memory.getByteAt(this.getHL());
        return null;
    }

    /**
     * OP code 0x67 - Load A into H.
     * @param ops unused.
     */
    Void ld_h_a(int[] ops) {
        this.H = this.A;
        return null;
    }

    /**
     * OP code 0x68 - Load B into L.
     * @param ops unused.
     */
    Void ld_l_b(int[] ops) {
        this.L = this.B;
        return null;
    }

    /**
     * OP code 0x69 - Load C into L.
     * @param ops unused.
     */
    Void ld_l_c(int[] ops) {
        this.L = this.C;
        return null;
    }

    /**
     * OP code 0x6A - Load D into L.
     * @param ops unused.
     */
    Void ld_l_d(int[] ops) {
        this.L = this.D;
        return null;
    }

    /**
     * OP code 0x6B - Load E into L.
     * @param ops unused.
     */
    Void ld_l_e(int[] ops) {
        this.L = this.E;
        return null;
    }

    /**
     * OP code 0x6C - Load H into L.
     * @param ops unused.
     */
    Void ld_l_h(int[] ops) {
        this.L = this.H;
        return null;
    }

    /**
     * OP code 0x6E - Load value at memory address specified by HL into L.
     * @param ops unused.
     */
    Void ld_l_hlp(int[] ops) {
        this.L = this.memory.getByteAt(this.getHL());
        return null;
    }

    /**
     * OP code 0x6F - Load A into L.
     * @param ops unused.
     */
    Void ld_l_a(int[] ops) {
        this.L = this.A;
        return null;
    }

    /**
     * OP code 0x70 - Load B into the memory address specified by HL.
     * @param ops unused.
     */
    Void ld_hlp_b(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.B);
        return null;
    }

    /**
     * OP code 0x71 - Load C into the memory address specified by HL.
     * @param ops unused.
     */
    Void ld_hlp_c(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.C);
        return null;
    }

    /**
     * OP code 0x72 - Load D into the memory address specified by HL.
     * @param ops unused.
     */
    Void ld_hlp_d(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.D);
        return null;
    }

    /**
     * OP code 0x73 - Load E into the memory address specified by HL.
     * @param ops unused.
     */
    Void ld_hlp_e(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.E);
        return null;
    }

    /**
     * OP code 0x74 - Load H into the memory address specified by HL.
     * @param ops unused.
     */
    Void ld_hlp_h(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.H);
        return null;
    }

    /**
     * OP code 0x75 - Load L into the memory address specified by HL.
     * @param ops unused.
     */
    Void ld_hlp_l(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.L);
        return null;
    }

    /**
     * OP code 0x76 - Halt the CPU.
     * @param ops unused.
     */
    Void halt(int[] ops) {
        int flags = this.memory.getByteAt(IORegisters.INTERRUPT_FLAGS);
        int ie = this.memory.getByteAt(IORegisters.INTERRUPT_ENABLE);

        if(this.ime) {
            this.isStopped = true;
        } else {
            if((ie & flags & 0x1F) == 0) {
                this.isStopped = true;
            }

            if((ie & flags & 0x1F) != 0) {
                this.haltBug = true;
            }
        }

        return null;
    }

    /**
     * OP code 0x77 - Load A into the memory address specified by HL.
     * @param ops unused.
     */
    Void ld_hlp_a(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.A);
        return null;
    }

    /**
     * OP code 0x78 - Load B into A.
     * @param ops unused.
     */
    Void ld_a_b(int[] ops) {
        this.A = this.B;
        return null;
    }

    /**
     * OP code 0x79 - Load C into A.
     * @param ops unused.
     */
    Void ld_a_c(int[] ops) {
        this.A = this.C;
        return null;
    }

    /**
     * OP code 0x7A - Load D into A.
     * @param ops unused.
     */
    Void ld_a_d(int[] ops) {
        this.A = this.D;
        return null;
    }

    /**
     * OP code 0x7B - Load E into A.
     * @param ops unused.
     */
    Void ld_a_e(int[] ops) {
        this.A = this.E;
        return null;
    }

    /**
     * OP code 0x7C - Load H into A.
     * @param ops unused.
     */
    Void ld_a_h(int[] ops) {
        this.A = this.H;
        return null;
    }

    /**
     * OP code 0x7D - Load L into A.
     * @param ops unused.
     */
    Void ld_a_l(int[] ops) {
        this.A = this.L;
        return null;
    }

    /**
     * OP code 0x7E - Load value at memory address specified by HL into A.
     * @param ops unused.
     */
    Void ld_a_hlp(int[] ops) {
        this.A = this.memory.getByteAt(this.getHL());
        return null;
    }

    /**
     * OP code 0x80 - Add A and B and store the result in A.
     * @param ops unused.
     */
    Void add_a_b(int[] ops) {
        this.A = this.add8Bit(this.A, this.B);
        return null;
    }

    /**
     * OP code 0x81 - Add A and C and store the result in A.
     * @param ops unused.
     */
    Void add_a_c(int[] ops) {
        this.A = this.add8Bit(this.A, this.C);
        return null;
    }

    /**
     * OP code 0x82 - Add A and D and store the result in A.
     * @param ops unused.
     */
    Void add_a_d(int[] ops) {
        this.A = this.add8Bit(this.A, this.D);
        return null;
    }

    /**
     * OP code 0x83 - Add A and E and store the result in A.
     * @param ops unused.
     */
    Void add_a_e(int[] ops) {
        this.A = this.add8Bit(this.A, this.E);
        return null;
    }

    /**
     * OP code 0x84 - Add A and H and store the result in A.
     * @param ops unused.
     */
    Void add_a_h(int[] ops) {
        this.A = this.add8Bit(this.A, this.H);
        return null;
    }

    /**
     * OP code 0x85 - Add A and L and store the result in A.
     * @param ops unused.
     */
    Void add_a_l(int[] ops) {
        this.A = this.add8Bit(this.A, this.L);
        return null;
    }

    /**
     * OP code 0x86 - Add A and the value in memory pointed to by HL and store the result in A.
     * @param ops unused.
     */
    Void add_a_hlp(int[] ops) {
        this.A = this.add8Bit(this.A, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0x87 - Add A and A and store the result in A.
     * @param ops unused.
     */
    Void add_a_a(int[] ops) {
        this.A = this.add8Bit(this.A, this.A);
        return null;
    }

    /**
     * OP code 0x88 - Add A, B and the value of the carry flag and store the results in A.
     * @param ops unused.
     */
    Void adc_a_b(int[] ops) {
        this.A = this.adc(this.A, this.B);
        return null;
    }

    /**
     * OP code 0x89 - Add A, C and the value of the carry flag and store the results in A.
     * @param ops unused.
     */
    Void adc_a_c(int[] ops) {
        this.A = this.adc(this.A, this.C);
        return null;
    }

    /**
     * OP code 0x8A - Add A, D and the value of the carry flag and store the results in A.
     * @param ops unused.
     */
    Void adc_a_d(int[] ops) {
        this.A = this.adc(this.A, this.D);
        return null;
    }

    /**
     * OP code 0x8B - Add A, E and the value of the carry flag and store the results in A.
     * @param ops unused.
     */
    Void adc_a_e(int[] ops) {
        this.A = this.adc(this.A, this.E);
        return null;
    }

    /**
     * OP code 0x8C - Add A, H and the value of the carry flag and store the results in A.
     * @param ops unused.
     */
    Void adc_a_h(int[] ops) {
        this.A = this.adc(this.A, this.H);
        return null;
    }

    /**
     * OP code 0x8D - Add A, L and the value of the carry flag and store the results in A.
     * @param ops unused.
     */
    Void adc_a_l(int[] ops) {
        this.A = this.adc(this.A, this.L);
        return null;
    }

    /**
     * OP code 0x8E - Add A, the value in memory pointed to by HL and the value of the carry flag and store the results in A.
     * @param ops unused.
     */
    Void adc_a_hlp(int[] ops) {
        this.A = this.adc(this.A, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0x8F - Add A, B and the value of the carry flag and store the results in A.
     * @param ops unused.
     */
    Void adc_a_a(int[] ops) {
        this.A = this.adc(this.A, this.A);
        return null;
    }

    /**
     * OP code 0x90 - Subtract B from A and store the result in A.
     * @param ops unused.
     */
    Void sub_b(int[] ops) {
        this.A = this.sub(this.B);
        return null;
    }

    /**
     * OP code 0x91 - Subtract C from A and store the result in A.
     * @param ops unused.
     */
    Void sub_c(int[] ops) {
        this.A = this.sub(this.C);
        return null;
    }

    /**
     * OP code 0x92 - Subtract D from A and store the result in A.
     * @param ops unused.
     */
    Void sub_d(int[] ops) {
        this.A = this.sub(this.D);
        return null;
    }

    /**
     * OP code 0x93 - Subtract E from A and store the result in A.
     * @param ops unused.
     */
    Void sub_e(int[] ops) {
        this.A = this.sub(this.E);
        return null;
    }

    /**
     * OP code 0x94 - Subtract H from A and store the result in A.
     * @param ops unused.
     */
    Void sub_h(int[] ops) {
        this.A = this.sub(this.H);
        return null;
    }

    /**
     * OP code 0x95 - Subtract L from A and store the result in A.
     * @param ops unused.
     */
    Void sub_l(int[] ops) {
        this.A = this.sub(this.L);
        return null;
    }

    /**
     * OP code 0x96 - Subtract the value in memory pointed to by HL from A and store the result in A.
     * @param ops unused.
     */
    Void sub_hlp(int[] ops) {
        this.A = this.sub(this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0x97 - Subtract A from A and store the result in A.
     * @param ops unused.
     */
    Void sub_a(int[] ops) {
        this.A = this.sub(this.A);
        return null;
    }

    /**
     * OP code 0x98 - Subtract B from A and store the result in A.
     * @param ops unused.
     */
    Void sbc_a_b(int[] ops) {
        this.A = this.sbc(this.B);
        return null;
    }

    /**
     * OP code 0x99 - Subtract C from A and store the result in A.
     * @param ops unused.
     */
    Void sbc_a_c(int[] ops) {
        this.A = this.sbc(this.C);
        return null;
    }

    /**
     * OP code 0x9A - Subtract D from A and store the result in A.
     * @param ops unused.
     */
    Void sbc_a_d(int[] ops) {
        this.A = this.sbc(this.D);
        return null;
    }

    /**
     * OP code 0x9B - Subtract E from A and store the result in A.
     * @param ops unused.
     */
    Void sbc_a_e(int[] ops) {
        this.A = this.sbc(this.E);
        return null;
    }

    /**
     * OP code 0x9C - Subtract H from A and store the result in A.
     * @param ops unused.
     */
    Void sbc_a_h(int[] ops) {
        this.A = this.sbc(this.H);
        return null;
    }

    /**
     * OP code 0x9D - Subtract L from A and store the result in A.
     * @param ops unused.
     */
    Void sbc_a_l(int[] ops) {
        this.A = this.sbc(this.L);
        return null;
    }

    /**
     * OP code 0x9E - Subtract the value in memory pointed to by HL from A and store the result in A.
     * @param ops unused.
     */
    Void sbc_a_hlp(int[] ops) {
        this.A = this.sbc(this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0x9F - Subtract A from A and store the result in A.
     * @param ops unused.
     */
    Void sbc_a_a(int[] ops) {
        this.A = this.sbc(this.A);
        return null;
    }

    /**
     * OP code 0xA0 - Bitwise and A and B.
     * @param ops Immediate 1 byte.
     */
    Void and_b(int[] ops) {
        this.and(this.B);

        return null;
    }

    /**
     * OP code 0xA1 - Bitwise and A and C.
     * @param ops Immediate 1 byte.
     */
    Void and_c(int[] ops) {
        this.and(this.C);

        return null;
    }

    /**
     * OP code 0xA2 - Bitwise and A and D.
     * @param ops Immediate 1 byte.
     */
    Void and_d(int[] ops) {
        this.and(this.D);

        return null;
    }

    /**
     * OP code 0xA3 - Bitwise and A and E.
     * @param ops Immediate 1 byte.
     */
    Void and_e(int[] ops) {
        this.and(this.E);

        return null;
    }

    /**
     * OP code 0xA4 - Bitwise and A and H.
     * @param ops Immediate 1 byte.
     */
    Void and_h(int[] ops) {
        this.and(this.H);

        return null;
    }

    /**
     * OP code 0xA5 - Bitwise and A and L.
     * @param ops Immediate 1 byte.
     */
    Void and_l(int[] ops) {
        this.and(this.L);

        return null;
    }

    /**
     * OP code 0xA6 - Bitwise and A and the value in memory pointed to by HL.
     * @param ops Immediate 1 byte.
     */
    Void and_hlp(int[] ops) {
        this.and(this.memory.getByteAt(this.getHL()));

        return null;
    }

    /**
     * OP code 0xA7 - Bitwise and A and L.
     * @param ops Immediate 1 byte.
     */
    Void and_a(int[] ops) {
        this.and(this.A);

        return null;
    }

    /**
     * OP code 0xA8 - Bitwise xor A and B.
     * @param ops Immediate 1 byte.
     */
    Void xor_b(int[] ops) {
        this.xor(this.B);

        return null;
    }

    /**
     * OP code 0xA9 - Bitwise xor A and C.
     * @param ops Immediate 1 byte.
     */
    Void xor_c(int[] ops) {
        this.xor(this.C);

        return null;
    }

    /**
     * OP code 0xAA - Bitwise xor A and D.
     * @param ops Immediate 1 byte.
     */
    Void xor_d(int[] ops) {
        this.xor(this.D);

        return null;
    }

    /**
     * OP code 0xAB - Bitwise xor A and E.
     * @param ops Immediate 1 byte.
     */
    Void xor_e(int[] ops) {
        this.xor(this.E);

        return null;
    }

    /**
     * OP code 0xAC - Bitwise xor A and H.
     * @param ops Immediate 1 byte.
     */
    Void xor_h(int[] ops) {
        this.xor(this.H);

        return null;
    }

    /**
     * OP code 0xAD - Bitwise xor A and L.
     * @param ops Immediate 1 byte.
     */
    Void xor_l(int[] ops) {
        this.xor(this.L);

        return null;
    }

    /**
     * OP code 0xAE - Bitwise xor A and the value in memory pointed to by HL.
     * @param ops Immediate 1 byte.
     */
    Void xor_hlp(int[] ops) {
        this.xor(this.memory.getByteAt(this.getHL()));

        return null;
    }

    /**
     * OP code 0xAF - Bitwise xor A and L.
     * @param ops Immediate 1 byte.
     */
    Void xor_a(int[] ops) {
        this.xor(this.A);

        return null;
    }

    /**
     * OP code 0xB0 - Bitwise or A and B.
     * @param ops Immediate 1 byte.
     */
    Void or_b(int[] ops) {
        this.or(this.B);

        return null;
    }

    /**
     * OP code 0xB1 - Bitwise or A and C.
     * @param ops Immediate 1 byte.
     */
    Void or_c(int[] ops) {
        this.or(this.C);

        return null;
    }

    /**
     * OP code 0xB2 - Bitwise or A and D.
     * @param ops Immediate 1 byte.
     */
    Void or_d(int[] ops) {
        this.or(this.D);

        return null;
    }

    /**
     * OP code 0xB3 - Bitwise or A and E.
     * @param ops Immediate 1 byte.
     */
    Void or_e(int[] ops) {
        this.or(this.E);

        return null;
    }

    /**
     * OP code 0xB4 - Bitwise or A and H.
     * @param ops Immediate 1 byte.
     */
    Void or_h(int[] ops) {
        this.or(this.H);

        return null;
    }

    /**
     * OP code 0xB5 - Bitwise or A and L.
     * @param ops Immediate 1 byte.
     */
    Void or_l(int[] ops) {
        this.or(this.L);

        return null;
    }

    /**
     * OP code 0xB6 - Bitwise or A and the value in memory pointed to by HL.
     * @param ops Immediate 1 byte.
     */
    Void or_hlp(int[] ops) {
        this.or(this.memory.getByteAt(this.getHL()));

        return null;
    }

    /**
     * OP code 0xB7 - Bitwise or A and L.
     * @param ops Immediate 1 byte.
     */
    Void or_a(int[] ops) {
        this.or(this.A);

        return null;
    }

    /**
     * OP code 0xB8 - Compare A and B.
     * @param ops Immediate 1 byte.
     */
    Void cp_b(int[] ops) {
        this.cp(this.B);

        return null;
    }

    /**
     * OP code 0xB9 - Compare A and C.
     * @param ops Immediate 1 byte.
     */
    Void cp_c(int[] ops) {
        this.cp(this.C);

        return null;
    }

    /**
     * OP code 0xBA - Compare A and D.
     * @param ops Immediate 1 byte.
     */
    Void cp_d(int[] ops) {
        this.cp(this.D);

        return null;
    }

    /**
     * OP code 0xBB - Compare A and E.
     * @param ops Immediate 1 byte.
     */
    Void cp_e(int[] ops) {
        this.cp(this.E);

        return null;
    }

    /**
     * OP code 0xBC - Compare A and H.
     * @param ops Immediate 1 byte.
     */
    Void cp_h(int[] ops) {
        this.cp(this.H);

        return null;
    }

    /**
     * OP code 0xBD - Compare A and L.
     * @param ops Immediate 1 byte.
     */
    Void cp_l(int[] ops) {
        this.cp(this.L);

        return null;
    }

    /**
     * OP code 0xBE - Compare A and the value in memory pointed to by HL.
     * @param ops Immediate 1 byte.
     */
    Void cp_hlp(int[] ops) {
        this.cp(this.memory.getByteAt(this.getHL()));

        return null;
    }

    /**
     * OP code 0xBF - Compare A and L.
     * @param ops Immediate 1 byte.
     */
    Void cp_a(int[] ops) {
        this.cp(this.A);

        return null;
    }

    /**
     * OP code 0xC0 - If zero is not set, pop two bytes off the stack and return them to the PC.
     * @param ops unused.
     */
    Void ret_nz(int[] ops) {
        if((this.F & FLAG_ZERO) != FLAG_ZERO) {
            this.PC = this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP));
            this.SP += 2;

            this.incrementCycles(20);
        } else {
            this.incrementCycles(8);
        }

        return null;
    }

    /**
     * OP code 0xC1 - Pop two bytes off the stack and return them to the BC.
     * @param ops unused.
     */
    Void pop_bc(int[] ops) {
        this.setBC(this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP)));
        this.SP += 2;

        return null;
    }

    /**
     * OP code 0xC2 - If the zero flag is not set, jump to the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void jp_nz_xx(int[] ops) {
        if((this.F & FLAG_ZERO) != FLAG_ZERO) {
            this.PC = this.combineBytes(ops[0], ops[1]) - 2;

            this.incrementCycles(16);
        } else {
            this.incrementCycles(12);
        }

        return null;
    }

    /**
     * OP code 0xC3 - Jump to the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void jp_xx(int[] ops) {
        this.PC = this.combineBytes(ops[0], ops[1]) - 2;

        return null;
    }

    /**
     * OP code 0xC4 - If the zero is not set, call the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void call_nz_xx(int[] ops) {
        if((this.F & FLAG_ZERO) != FLAG_ZERO) {
            this.PC += 2;
            this.memory.setByteAt(this.SP - 1, (this.PC >> 8) & 0xFF);
            this.memory.setByteAt(this.SP - 2, (this.PC) & 0xFF);

            this.PC = this.combineBytes(ops[0], ops[1]) - 2;
            this.SP -= 2;
            this.incrementCycles(24);
        } else {
            this.incrementCycles(12);
        }

        return null;
    }

    /**
     * OP code 0xC5 - Push the contents of BC onto the stack.
     * @param ops unused.
     */
    Void push_bc(int[] ops) {
        this.memory.setByteAt(this.SP - 1, (this.getBC() >> 8) & 0xFF);
        this.memory.setByteAt(this.SP - 2, (this.getBC()) & 0xFF);
        this.SP -= 2;

        return null;
    }

    /**
     * OP code 0xC6 - Add A and an 8-bit number.
     * @param ops Immediate 1 byte.
     */
    Void add_a_x(int[] ops) {
        this.A = this.add8Bit(this.A, ops[0]);
        return null;
    }

    /**
     * OP code 0xC7 - Push PC onto stack and reset PC to 0x00.
     * @param ops unused.
     */
    Void rst_00(int[] ops) {
        this.rst(0x00);
        return null;
    }

    /**
     * OP code 0xC8 - If zero is set, pop two bytes off the stack and return them to the PC.
     * @param ops unused.
     */
    Void ret_z(int[] ops) {
        if((this.F & FLAG_ZERO) == FLAG_ZERO) {
            this.PC = this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP));
            this.SP += 2;

            this.incrementCycles(20);
        } else {
            this.incrementCycles(8);
        }

        return null;
    }

    /**
     * OP code 0xC9 - Pop two bytes off the stack and return them to the PC.
     * @param ops unused.
     */
    Void ret(int[] ops) {
        this.PC = this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP));
        this.SP += 2;

        return null;
    }

    /**
     * OP code 0xCA - If the zero flag is set, jump to the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void jp_z_xx(int[] ops) {
        if((this.F & FLAG_ZERO) == FLAG_ZERO) {
            this.PC = this.combineBytes(ops[0], ops[1]) - 2;

            this.incrementCycles(16);
        } else {
            this.incrementCycles(12);
        }

        return null;
    }

    /**
     * OP code 0xCC - If the zero is set, call the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void call_z_xx(int[] ops) {
        if((this.F & FLAG_ZERO) == FLAG_ZERO) {
            this.PC += 2;
            this.memory.setByteAt(this.SP - 1, (this.PC >> 8) & 0xFF);
            this.memory.setByteAt(this.SP - 2, (this.PC) & 0xFF);

            this.PC = this.combineBytes(ops[0], ops[1]) - 2;
            this.SP -= 2;
            this.incrementCycles(24);
        } else {
            this.incrementCycles(12);
        }

        return null;
    }

    /**
     * OP code 0xCD - Call the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void call_xx(int[] ops) {
        this.PC += 2;
        this.memory.setByteAt(this.SP - 1, (this.PC >> 8) & 0xFF);
        this.memory.setByteAt(this.SP - 2, (this.PC) & 0xFF);

        this.PC = this.combineBytes(ops[0], ops[1]) - 2;
        this.SP -= 2;

        return null;
    }

    /**
     * OP code 0xCE - Add A, an 8-bit value and the value of the carry flag and store the results in A.
     * @param ops Immediate 1 byte.
     */
    Void adc_a_x(int[] ops) {
        this.A = this.adc(this.A, ops[0]);
        return null;
    }

    /**
     * OP code 0xCF - Push PC onto stack and reset PC to 0x08.
     * @param ops unused.
     */
    Void rst_08(int[] ops) {
        this.rst(0x08);
        return null;
    }

    /**
     * OP code 0xD0 - If carry is not set, pop two bytes off the stack and return them to the PC.
     * @param ops unused.
     */
    Void ret_nc(int[] ops) {
        if((this.F & FLAG_CARRY) != FLAG_CARRY) {
            this.PC = this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP));
            this.SP += 2;

            this.incrementCycles(20);
        } else {
            this.incrementCycles(8);
        }

        return null;
    }

    /**
     * OP code 0xD1 - Pop two bytes off the stack and return them to the DE.
     * @param ops unused.
     */
    Void pop_de(int[] ops) {
        this.setDE(this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP)));
        this.SP += 2;

        return null;
    }

    /**
     * OP code 0xD2 - If the carry flag is not set, jump to the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void jp_nc_xx(int[] ops) {
        if((this.F & FLAG_CARRY) != FLAG_CARRY) {
            this.PC = this.combineBytes(ops[0], ops[1]) - 2;

            this.incrementCycles(16);
        } else {
            this.incrementCycles(12);
        }

        return null;
    }

    /**
     * OP code 0xD4 - If the carry not is set, call the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void call_nc_xx(int[] ops) {
        if((this.F & FLAG_CARRY) != FLAG_CARRY) {
            this.PC += 2;
            this.memory.setByteAt(this.SP - 1, (this.PC >> 8) & 0xFF);
            this.memory.setByteAt(this.SP - 2, (this.PC) & 0xFF);

            this.PC = this.combineBytes(ops[0], ops[1]) - 2;
            this.SP -= 2;
            this.incrementCycles(24);
        } else {
            this.incrementCycles(12);
        }

        return null;
    }

    /**
     * OP code 0xD5 - Push the contents of DE onto the stack.
     * @param ops unused.
     */
    Void push_de(int[] ops) {
        this.memory.setByteAt(this.SP - 1, (this.getDE() >> 8) & 0xFF);
        this.memory.setByteAt(this.SP - 2, (this.getDE()) & 0xFF);
        this.SP -= 2;

        return null;
    }

    /**
     * OP code 0xD6 - Subtract immediate byte from A and store the result in A.
     * @param ops Immediate 1 byte.
     */
    Void sub_x(int[] ops) {
        this.A = this.sub(ops[0]);
        return null;
    }

    /**
     * OP code 0xD7 - Push PC onto stack and reset PC to 0x10.
     * @param ops unused.
     */
    Void rst_10(int[] ops) {
        this.rst(0x10);
        return null;
    }

    /**
     * OP code 0xD8 - If carry is set, pop two bytes off the stack and return them to the PC.
     * @param ops unused.
     */
    Void ret_c(int[] ops) {
        if((this.F & FLAG_CARRY) == FLAG_CARRY) {
            this.PC = this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP));
            this.SP += 2;

            this.incrementCycles(20);
        } else {
            this.incrementCycles(8);
        }

        return null;
    }

    /**
     * OP code 0xD9 - Pop two bytes off the stack and return them to the PC and enable the IME.
     * @param ops unused.
     */
    Void reti(int[] ops) {
        this.PC = this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP));
        this.SP += 2;

        this.ime = true;

        return null;
    }

    /**
     * OP code 0xDA - If the carry flag is set, jump to the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void jp_c_xx(int[] ops) {
        if((this.F & FLAG_CARRY) == FLAG_CARRY) {
            this.PC = this.combineBytes(ops[0], ops[1]) - 2;

            this.incrementCycles(16);
        } else {
            this.incrementCycles(12);
        }

        return null;
    }

    /**
     * OP code 0xDC - If the carry is set, call the specified address.
     * @param ops Immediate 2 bytes.
     */
    Void call_c_xx(int[] ops) {
        if((this.F & FLAG_CARRY) == FLAG_CARRY) {
            this.PC += 2;
            this.memory.setByteAt(this.SP - 1, (this.PC >> 8) & 0xFF);
            this.memory.setByteAt(this.SP - 2, (this.PC) & 0xFF);

            this.PC = this.combineBytes(ops[0], ops[1]) - 2;
            this.SP -= 2;
            this.incrementCycles(24);
        } else {
            this.incrementCycles(12);
        }

        return null;
    }

    /**
     * OP code 0xDE - Subtract immediate byte from A and store the result in A.
     * @param ops unused.
     */
    Void sbc_a_x(int[] ops) {
        this.A = this.sbc(ops[0]);
        return null;
    }

    /**
     * OP code 0xDF - Push PC onto stack and reset PC to 0x18.
     * @param ops unused.
     */
    Void rst_18(int[] ops) {
        this.rst(0x18);
        return null;
    }

    /**
     * OP code 0xE0 - Load A into the value at memory address specified by 0xFF00 + immediate byte.
     * @param ops Immediate 1 byte.
     */
    Void ld_xp_a(int[] ops) {
        this.memory.setByteAt(0xFF00 + ops[0], this.A);

        return null;
    }

    /**
     * OP code 0xE1 - Pop two bytes off the stack and return them to the HL.
     * @param ops unused.
     */
    Void pop_hl(int[] ops) {
        this.setHL(this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP)));
        this.SP += 2;

        return null;
    }

    /**
     * OP code 0xE2 - Load A into the value at memory address specified by 0xFF00 + C.
     * @param ops unused.
     */
    Void ld_cp_a(int[] ops) {
        this.memory.setByteAt(0xFF00 + (this.C & 0xFF), this.A);

        return null;
    }

    /**
     * OP code 0xE5 - Push the contents of HL onto the stack.
     * @param ops unused.
     */
    Void push_hl(int[] ops) {
        this.memory.setByteAt(this.SP - 1, (this.getHL() >> 8) & 0xFF);
        this.memory.setByteAt(this.SP - 2, (this.getHL()) & 0xFF);
        this.SP -= 2;

        return null;
    }

    /**
     * OP code 0xE6 - Bitwise and A and immediate byte.
     * @param ops Immediate 1 byte.
     */
    Void and_x(int[] ops) {
        this.and(ops[0]);

        return null;
    }

    /**
     * OP code 0xE7 - Push PC onto stack and reset PC to 0x20.
     * @param ops unused.
     */
    Void rst_20(int[] ops) {
        this.rst(0x20);
        return null;
    }

    /**
     * OP code 0xE8 - Add immediate byte to SP.
     * @param ops Immediate 1 byte.
     */
    Void add_sp_x(int[] ops) {
        this.SP = this.add16Bit(this.SP, ops[0]);
        this.setFlags(FLAG_ZERO);
        return null;
    }

    /**
     * OP code 0xE9 - Jump to the address pointed to by HL.
     * @param ops unused.
     */
    Void jp_hlp(int[] ops) {
        this.PC = this.getHL();

        return null;
    }

    /**
     * OP code 0xEA - Load A into the value at memory address specified by immediate 2 bytes.
     * @param ops Immediate 2 bytes.
     */
    Void ld_xxp_a(int[] ops) {
        this.memory.setByteAt(this.combineBytes(ops[0], ops[1]), this.A);

        return null;
    }

    /**
     * OP code 0xEE - Bitwise xor A and immediate byte.
     * @param ops Immediate 1 byte.
     */
    Void xor_x(int[] ops) {
        this.xor(ops[0]);

        return null;
    }

    /**
     * OP code 0xEF - Push PC onto stack and reset PC to 0x28.
     * @param ops unused.
     */
    Void rst_28(int[] ops) {
        this.rst(0x28);
        return null;
    }

    /**
     * OP code 0xF0 - Load value at memory address specified by 0xFF00 + immediate byte into A.
     * @param ops Immediate 1 byte.
     */
    Void ld_a_xp(int[] ops) {
        this.A = this.memory.getByteAt(0xFF00 + ops[0]);

        return null;
    }

    /**
     * OP code 0xF1 - Pop two bytes off the stack and return them to the AF.
     * @param ops unused.
     */
    Void pop_af(int[] ops) {
        this.setAF(this.combineBytes(this.memory.getByteAt(this.SP + 1), this.memory.getByteAt(this.SP)));
        this.SP += 2;

        return null;
    }

    /**
     * OP code 0xF2 - Load A into the value at memory address specified by 0xFF00 + C.
     * @param ops unused.
     */
    Void ld_a_cp(int[] ops) {
        this.A = this.memory.getByteAt(0xFF00 + (this.C & 0xFF));

        return null;
    }

    /**
     * OP code 0xF3 - Disables the IME
     * @param ops unused.
     */
    Void di(int[] ops) {
        this.ime = false;
        return null;
    }

    /**
     * OP code 0xF5 - Push the contents of AF onto the stack.
     * @param ops unused.
     */
    Void push_af(int[] ops) {
        this.memory.setByteAt(this.SP - 1, (this.getAF() >> 8) & 0xFF);
        this.memory.setByteAt(this.SP - 2, (this.getAF()) & 0xFF);
        this.SP -= 2;

        return null;
    }

    /**
     * OP code 0xF6 - Bitwise or A and immediate byte.
     * @param ops Immediate 1 byte.
     */
    Void or_x(int[] ops) {
        this.or(ops[0]);

        return null;
    }

    /**
     * OP code 0xF7 - Push PC onto stack and reset PC to 0x30.
     * @param ops unused.
     */
    Void rst_30(int[] ops) {
        this.rst(0x30);
        return null;
    }

    /**
     * OP code 0xF8 - Immediate byte is added to SP and the result is stored in HL.
     * @param ops Immediate 1 byte.
     */
    Void ld_hl_sp_x(int[] ops) {
        int result = this.SP + ops[0];

        if((result & 0xFFFF0000) != 0) {
            this.setFlags(FLAG_CARRY);
        } else {
            this.resetFlags(FLAG_CARRY);
        }

        if(((this.SP & 0x0F) + (ops[0] & 0x0F)) > 0x0F) {
            this.setFlags(FLAG_HALF);
        } else {
            this.resetFlags(FLAG_HALF);
        }

        this.resetFlags(FLAG_ZERO | FLAG_SUB);

        this.setHL(result & 0xFFFF);

        return null;
    }

    /**
     * OP code 0xF9 - Loads HL into SP.
     * @param ops unused.
     */
    Void ld_sp_hl(int[] ops) {
        this.SP = this.getHL();

        return null;
    }

    /**
     * OP code 0xFA - Loads the value in memory specified by the immediate 2 bytes into A.
     * @param ops Immediate 2 bytes.
     */
    Void ld_a_xxp(int[] ops) {
        this.A = this.memory.getByteAt(this.combineBytes(ops[0], ops[1]));

        return null;
    }

    /**
     * OP code 0xFB - Enables the IME. The IME is not enabled until the next cycle.
     * @param ops unused.
     */
    Void ei(int[] ops) {
        this.pendingEnableIME = true;
        return null;
    }

    /**
     * OP code 0xFE - Compare A and immediate byte.
     * @param ops Immediate 1 byte.
     */
    Void cp_x(int[] ops) {
        this.cp(ops[0]);

        return null;
    }

    /**
     * OP code 0xFF - Push PC onto stack and reset PC to 0x38.
     * @param ops unused.
     */
    Void rst_38(int[] ops) {
        this.rst(0x38);
        return null;
    }

    /**
     * OP code 0xCB00 - Rotates the contents of B to the left.
     * @param ops unused.
     */
    Void rlc_b(int[] ops) {
        this.B = this.rlc(this.B);
        return null;
    }

    /**
     * OP code 0xCB01 - Rotates the contents of C to the left.
     * @param ops unused.
     */
    Void rlc_c(int[] ops) {
        this.C = this.rlc(this.C);
        return null;
    }

    /**
     * OP code 0xCB02 - Rotates the contents of D to the left.
     * @param ops unused.
     */
    Void rlc_d(int[] ops) {
        this.D = this.rlc(this.D);
        return null;
    }

    /**
     * OP code 0xCB03 - Rotates the contents of E to the left.
     * @param ops unused.
     */
    Void rlc_e(int[] ops) {
        this.E = this.rlc(this.E);
        return null;
    }

    /**
     * OP code 0xCB04 - Rotates the contents of H to the left.
     * @param ops unused.
     */
    Void rlc_h(int[] ops) {
        this.H = this.rlc(this.H);
        return null;
    }

    /**
     * OP code 0xCB05 - Rotates the contents of L to the left.
     * @param ops unused.
     */
    Void rlc_l(int[] ops) {
        this.L = this.rlc(this.L);
        return null;
    }

    /**
     * OP code 0xCB06 - Rotates the contents of the value in memory pointed to by HL to the left.
     * @param ops unused.
     */
    Void rlc_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.rlc(this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB07 - Rotates the contents of A to the left.
     * @param ops unused.
     */
    Void rlc_a(int[] ops) {
        this.A = this.rlc(this.A);
        return null;
    }

    /**
     * OP code 0xCB08 - Rotates the contents of B to the right.
     * @param ops unused.
     */
    Void rrc_b(int[] ops) {
        this.B = this.rrc(this.B);
        return null;
    }

    /**
     * OP code 0xCB09 - Rotates the contents of C to the right.
     * @param ops unused.
     */
    Void rrc_c(int[] ops) {
        this.C = this.rrc(this.C);
        return null;
    }

    /**
     * OP code 0xCB0A - Rotates the contents of D to the right.
     * @param ops unused.
     */
    Void rrc_d(int[] ops) {
        this.D = this.rrc(this.D);
        return null;
    }

    /**
     * OP code 0xCB0B - Rotates the contents of E to the right.
     * @param ops unused.
     */
    Void rrc_e(int[] ops) {
        this.E = this.rrc(this.E);
        return null;
    }

    /**
     * OP code 0xCB0C - Rotates the contents of H to the right.
     * @param ops unused.
     */
    Void rrc_h(int[] ops) {
        this.H = this.rrc(this.H);
        return null;
    }

    /**
     * OP code 0xCB0D - Rotates the contents of L to the right.
     * @param ops unused.
     */
    Void rrc_l(int[] ops) {
        this.L = this.rrc(this.L);
        return null;
    }

    /**
     * OP code 0xCB0E - Rotates the contents of the value in memory pointed to by HL to the right.
     * @param ops unused.
     */
    Void rrc_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.rrc(this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB0F - Rotates the contents of A to the right.
     * @param ops unused.
     */
    Void rrc_a(int[] ops) {
        this.A = this.rrc(this.A);
        return null;
    }

    /**
     * OP code 0xCB10 - Rotates the contents of B to the left.
     * @param ops unused.
     */
    Void rl_b(int[] ops) {
        this.B = this.rl(this.B);
        return null;
    }

    /**
     * OP code 0xCB11 - Rotates the contents of C to the left.
     * @param ops unused.
     */
    Void rl_c(int[] ops) {
        this.C = this.rl(this.C);
        return null;
    }

    /**
     * OP code 0xCB12 - Rotates the contents of D to the left.
     * @param ops unused.
     */
    Void rl_d(int[] ops) {
        this.D = this.rl(this.D);
        return null;
    }

    /**
     * OP code 0xCB13 - Rotates the contents of E to the left.
     * @param ops unused.
     */
    Void rl_e(int[] ops) {
        this.E = this.rl(this.E);
        return null;
    }

    /**
     * OP code 0xCB14 - Rotates the contents of H to the left.
     * @param ops unused.
     */
    Void rl_h(int[] ops) {
        this.H = this.rl(this.H);
        return null;
    }

    /**
     * OP code 0xCB15 - Rotates the contents of L to the left.
     * @param ops unused.
     */
    Void rl_l(int[] ops) {
        this.L = this.rl(this.L);
        return null;
    }

    /**
     * OP code 0xCB16 - Rotates the contents of the value in memory pointed to by HL to the left.
     * @param ops unused.
     */
    Void rl_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.rl(this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB17 - Rotates the contents of A to the left.
     * @param ops unused.
     */
    Void rl_a(int[] ops) {
        this.A = this.rl(this.A);
        return null;
    }

    /**
     * OP code 0xCB18 - Rotates the contents of B to the right.
     * @param ops unused.
     */
    Void rr_b(int[] ops) {
        this.B = this.rr(this.B);
        return null;
    }

    /**
     * OP code 0xCB19 - Rotates the contents of C to the right.
     * @param ops unused.
     */
    Void rr_c(int[] ops) {
        this.C = this.rr(this.C);
        return null;
    }

    /**
     * OP code 0xCB1A - Rotates the contents of D to the right.
     * @param ops unused.
     */
    Void rr_d(int[] ops) {
        this.D = this.rr(this.D);
        return null;
    }

    /**
     * OP code 0xCB1B - Rotates the contents of E to the right.
     * @param ops unused.
     */
    Void rr_e(int[] ops) {
        this.E = this.rr(this.E);
        return null;
    }

    /**
     * OP code 0xCB1C - Rotates the contents of H to the right.
     * @param ops unused.
     */
    Void rr_h(int[] ops) {
        this.H = this.rr(this.H);
        return null;
    }

    /**
     * OP code 0xCB1D - Rotates the contents of L to the right.
     * @param ops unused.
     */
    Void rr_l(int[] ops) {
        this.L = this.rr(this.L);
        return null;
    }

    /**
     * OP code 0xCB1E - Rotates the contents of the value in memory pointed to by HL to the right.
     * @param ops unused.
     */
    Void rr_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.rr(this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB1F - Rotates the contents of A to the right.
     * @param ops unused.
     */
    Void rr_a(int[] ops) {
        this.A = this.rr(this.A);
        return null;
    }

    /**
     * OP code 0xCB20 - Shifts the contents of B to the left.
     * @param ops unused.
     */
    Void sla_b(int[] ops) {
        this.B = this.sla(this.B);
        return null;
    }

    /**
     * OP code 0xCB21 - Shifts the contents of C to the left.
     * @param ops unused.
     */
    Void sla_c(int[] ops) {
        this.C = this.sla(this.C);
        return null;
    }

    /**
     * OP code 0xCB22 - Shifts the contents of D to the left.
     * @param ops unused.
     */
    Void sla_d(int[] ops) {
        this.D = this.sla(this.D);
        return null;
    }

    /**
     * OP code 0xCB23 - Shifts the contents of E to the left.
     * @param ops unused.
     */
    Void sla_e(int[] ops) {
        this.E = this.sla(this.E);
        return null;
    }

    /**
     * OP code 0xCB24 - Shifts the contents of H to the left.
     * @param ops unused.
     */
    Void sla_h(int[] ops) {
        this.H = this.sla(this.H);
        return null;
    }

    /**
     * OP code 0xCB25 - Shifts the contents of L to the left.
     * @param ops unused.
     */
    Void sla_l(int[] ops) {
        this.L = this.sla(this.L);
        return null;
    }

    /**
     * OP code 0xCB26 - Shifts the contents of the value in memory pointed to by HL to the left.
     * @param ops unused.
     */
    Void sla_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.sla(this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB27 - Shifts the contents of A to the left.
     * @param ops unused.
     */
    Void sla_a(int[] ops) {
        this.A = this.sla(this.A);
        return null;
    }

    /**
     * OP code 0xCB28 - Shifts the contents of B to the right.
     * @param ops unused.
     */
    Void sra_b(int[] ops) {
        this.B = this.sra(this.B);
        return null;
    }

    /**
     * OP code 0xCB29 - Shifts the contents of C to the right.
     * @param ops unused.
     */
    Void sra_c(int[] ops) {
        this.C = this.sra(this.C);
        return null;
    }

    /**
     * OP code 0xCB2A - Shifts the contents of D to the right.
     * @param ops unused.
     */
    Void sra_d(int[] ops) {
        this.D = this.sra(this.D);
        return null;
    }

    /**
     * OP code 0xCB2B - Shifts the contents of E to the right.
     * @param ops unused.
     */
    Void sra_e(int[] ops) {
        this.E = this.sra(this.E);
        return null;
    }

    /**
     * OP code 0xCB2C - Shifts the contents of H to the right.
     * @param ops unused.
     */
    Void sra_h(int[] ops) {
        this.H = this.sra(this.H);
        return null;
    }

    /**
     * OP code 0xCB2D - Shifts the contents of L to the right.
     * @param ops unused.
     */
    Void sra_l(int[] ops) {
        this.L = this.sra(this.L);
        return null;
    }

    /**
     * OP code 0xCB2E - Shifts the contents of the value in memory pointed to by HL to the right.
     * @param ops unused.
     */
    Void sra_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.sra(this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB2F - Shifts the contents of A to the right.
     * @param ops unused.
     */
    Void sra_a(int[] ops) {
        this.A = this.sra(this.A);
        return null;
    }

    /**
     * OP code 0xCB30 - Swaps the nibbles of B.
     * @param ops unused.
     */
    Void swap_b(int[] ops) {
        this.B = this.swap(this.B);
        return null;
    }

    /**
     * OP code 0xCB31 - Swaps the nibbles of C.
     * @param ops unused.
     */
    Void swap_c(int[] ops) {
        this.C = this.swap(this.C);
        return null;
    }

    /**
     * OP code 0xCB32 - Swaps the nibbles of D.
     * @param ops unused.
     */
    Void swap_d(int[] ops) {
        this.D = this.swap(this.D);
        return null;
    }

    /**
     * OP code 0xCB33 - Swaps the nibbles of E.
     * @param ops unused.
     */
    Void swap_e(int[] ops) {
        this.E = this.swap(this.E);
        return null;
    }

    /**
     * OP code 0xCB34 - Swaps the nibbles of H.
     * @param ops unused.
     */
    Void swap_h(int[] ops) {
        this.H = this.swap(this.H);
        return null;
    }

    /**
     * OP code 0xCB35 - Swaps the nibbles of L.
     * @param ops unused.
     */
    Void swap_l(int[] ops) {
        this.L = this.swap(this.L);
        return null;
    }

    /**
     * OP code 0xCB36 - Swaps the nibbles of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void swap_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.swap(this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB37 - Swaps the nibbles of A.
     * @param ops unused.
     */
    Void swap_a(int[] ops) {
        this.A = this.swap(this.A);
        return null;
    }

    /**
     * OP code 0xCB38 - Shifts the contents of B to the right.
     * @param ops unused.
     */
    Void srl_b(int[] ops) {
        this.B = this.srl(this.B);
        return null;
    }

    /**
     * OP code 0xCB39 - Shifts the contents of C to the right.
     * @param ops unused.
     */
    Void srl_c(int[] ops) {
        this.C = this.srl(this.C);
        return null;
    }

    /**
     * OP code 0xCB3A - Shifts the contents of D to the right.
     * @param ops unused.
     */
    Void srl_d(int[] ops) {
        this.D = this.srl(this.D);
        return null;
    }

    /**
     * OP code 0xCB3B - Shifts the contents of E to the right.
     * @param ops unused.
     */
    Void srl_e(int[] ops) {
        this.E = this.srl(this.E);
        return null;
    }

    /**
     * OP code 0xCB3C - Shifts the contents of H to the right.
     * @param ops unused.
     */
    Void srl_h(int[] ops) {
        this.H = this.srl(this.H);
        return null;
    }

    /**
     * OP code 0xCB3D - Shifts the contents of L to the right.
     * @param ops unused.
     */
    Void srl_l(int[] ops) {
        this.L = this.srl(this.L);
        return null;
    }

    /**
     * OP code 0xCB3E - Shifts the contents of the value in memory pointed to by HL to the right.
     * @param ops unused.
     */
    Void srl_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.srl(this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB3F - Shifts the contents of A to the right.
     * @param ops unused.
     */
    Void srl_a(int[] ops) {
        this.A = this.srl(this.A);
        return null;
    }

    /**
     * OP code 0xCB40 - Sets the zero flag to the compliment of the 0th bit of B.
     * @param ops unused.
     */
    Void bit_0_b(int[] ops) {
        this.bit(0, this.B);
        return null;
    }

    /**
     * OP code 0xCB41 - Sets the zero flag to the compliment of the 0th bit of C.
     * @param ops unused.
     */
    Void bit_0_c(int[] ops) {
        this.bit(0, this.C);
        return null;
    }

    /**
     * OP code 0xCB42 - Sets the zero flag to the compliment of the 0th bit of D.
     * @param ops unused.
     */
    Void bit_0_d(int[] ops) {
        this.bit(0, this.D);
        return null;
    }

    /**
     * OP code 0xCB43 - Sets the zero flag to the compliment of the 0th bit of E.
     * @param ops unused.
     */
    Void bit_0_e(int[] ops) {
        this.bit(0, this.E);
        return null;
    }

    /**
     * OP code 0xCB44 - Sets the zero flag to the compliment of the 0th bit of H.
     * @param ops unused.
     */
    Void bit_0_h(int[] ops) {
        this.bit(0, this.H);
        return null;
    }

    /**
     * OP code 0xCB45 - Sets the zero flag to the compliment of the 0th bit of L.
     * @param ops unused.
     */
    Void bit_0_l(int[] ops) {
        this.bit(0, this.L);
        return null;
    }

    /**
     * OP code 0xCB46 - Sets the zero flag to the compliment of the 0th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void bit_0_hlp(int[] ops) {
        this.bit(0, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0xCB47 - Sets the zero flag to the compliment of the 0th bit of A.
     * @param ops unused.
     */
    Void bit_0_a(int[] ops) {
        this.bit(0, this.A);
        return null;
    }

    /**
     * OP code 0xCB48 - Sets the zero flag to the compliment of the 1st bit of B.
     * @param ops unused.
     */
    Void bit_1_b(int[] ops) {
        this.bit(1, this.B);
        return null;
    }

    /**
     * OP code 0xCB49 - Sets the zero flag to the compliment of the 1st bit of C.
     * @param ops unused.
     */
    Void bit_1_c(int[] ops) {
        this.bit(1, this.C);
        return null;
    }

    /**
     * OP code 0xCB4A - Sets the zero flag to the compliment of the 1st bit of D.
     * @param ops unused.
     */
    Void bit_1_d(int[] ops) {
        this.bit(1, this.D);
        return null;
    }

    /**
     * OP code 0xCB4B - Sets the zero flag to the compliment of the 1st bit of E.
     * @param ops unused.
     */
    Void bit_1_e(int[] ops) {
        this.bit(1, this.E);
        return null;
    }

    /**
     * OP code 0xCB4C - Sets the zero flag to the compliment of the 1st bit of H.
     * @param ops unused.
     */
    Void bit_1_h(int[] ops) {
        this.bit(1, this.H);
        return null;
    }

    /**
     * OP code 0xCB4D - Sets the zero flag to the compliment of the 1st bit of L.
     * @param ops unused.
     */
    Void bit_1_l(int[] ops) {
        this.bit(1, this.L);
        return null;
    }

    /**
     * OP code 0xCB4E - Sets the zero flag to the compliment of the 1st bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void bit_1_hlp(int[] ops) {
        this.bit(1, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0xCB4F - Sets the zero flag to the compliment of the 1st bit of A.
     * @param ops unused.
     */
    Void bit_1_a(int[] ops) {
        this.bit(1, this.A);
        return null;
    }

    /**
     * OP code 0xCB50 - Sets the zero flag to the compliment of the 2nd bit of B.
     * @param ops unused.
     */
    Void bit_2_b(int[] ops) {
        this.bit(2, this.B);
        return null;
    }

    /**
     * OP code 0xCB51 - Sets the zero flag to the compliment of the 2nd bit of C.
     * @param ops unused.
     */
    Void bit_2_c(int[] ops) {
        this.bit(2, this.C);
        return null;
    }

    /**
     * OP code 0xCB52 - Sets the zero flag to the compliment of the 2nd bit of D.
     * @param ops unused.
     */
    Void bit_2_d(int[] ops) {
        this.bit(2, this.D);
        return null;
    }

    /**
     * OP code 0xCB53 - Sets the zero flag to the compliment of the 2nd bit of E.
     * @param ops unused.
     */
    Void bit_2_e(int[] ops) {
        this.bit(2, this.E);
        return null;
    }

    /**
     * OP code 0xCB54 - Sets the zero flag to the compliment of the 2nd bit of H.
     * @param ops unused.
     */
    Void bit_2_h(int[] ops) {
        this.bit(2, this.H);
        return null;
    }

    /**
     * OP code 0xCB55 - Sets the zero flag to the compliment of the 2nd bit of L.
     * @param ops unused.
     */
    Void bit_2_l(int[] ops) {
        this.bit(2, this.L);
        return null;
    }

    /**
     * OP code 0xCB56 - Sets the zero flag to the compliment of the 2nd bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void bit_2_hlp(int[] ops) {
        this.bit(2, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0xCB57 - Sets the zero flag to the compliment of the 2nd bit of A.
     * @param ops unused.
     */
    Void bit_2_a(int[] ops) {
        this.bit(2, this.A);
        return null;
    }

    /**
     * OP code 0xCB58 - Sets the zero flag to the compliment of the 3rd bit of B.
     * @param ops unused.
     */
    Void bit_3_b(int[] ops) {
        this.bit(3, this.B);
        return null;
    }

    /**
     * OP code 0xCB59 - Sets the zero flag to the compliment of the 3rd bit of C.
     * @param ops unused.
     */
    Void bit_3_c(int[] ops) {
        this.bit(3, this.C);
        return null;
    }

    /**
     * OP code 0xCB5A - Sets the zero flag to the compliment of the 3rd bit of D.
     * @param ops unused.
     */
    Void bit_3_d(int[] ops) {
        this.bit(3, this.D);
        return null;
    }

    /**
     * OP code 0xCB5B - Sets the zero flag to the compliment of the 3rd bit of E.
     * @param ops unused.
     */
    Void bit_3_e(int[] ops) {
        this.bit(3, this.E);
        return null;
    }

    /**
     * OP code 0xCB5C - Sets the zero flag to the compliment of the 3rd bit of H.
     * @param ops unused.
     */
    Void bit_3_h(int[] ops) {
        this.bit(3, this.H);
        return null;
    }

    /**
     * OP code 0xCB5D - Sets the zero flag to the compliment of the 3rd bit of L.
     * @param ops unused.
     */
    Void bit_3_l(int[] ops) {
        this.bit(3, this.L);
        return null;
    }

    /**
     * OP code 0xCB5E - Sets the zero flag to the compliment of the 3rd bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void bit_3_hlp(int[] ops) {
        this.bit(3, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0xCB5F - Sets the zero flag to the compliment of the 3rd bit of A.
     * @param ops unused.
     */
    Void bit_3_a(int[] ops) {
        this.bit(3, this.A);
        return null;
    }

    /**
     * OP code 0xCB60 - Sets the zero flag to the compliment of the 4th bit of B.
     * @param ops unused.
     */
    Void bit_4_b(int[] ops) {
        this.bit(4, this.B);
        return null;
    }

    /**
     * OP code 0xCB61 - Sets the zero flag to the compliment of the 4th bit of C.
     * @param ops unused.
     */
    Void bit_4_c(int[] ops) {
        this.bit(4, this.C);
        return null;
    }

    /**
     * OP code 0xCB62 - Sets the zero flag to the compliment of the 4th bit of D.
     * @param ops unused.
     */
    Void bit_4_d(int[] ops) {
        this.bit(4, this.D);
        return null;
    }

    /**
     * OP code 0xCB63 - Sets the zero flag to the compliment of the 4th bit of E.
     * @param ops unused.
     */
    Void bit_4_e(int[] ops) {
        this.bit(4, this.E);
        return null;
    }

    /**
     * OP code 0xCB64 - Sets the zero flag to the compliment of the 4th bit of H.
     * @param ops unused.
     */
    Void bit_4_h(int[] ops) {
        this.bit(4, this.H);
        return null;
    }

    /**
     * OP code 0xCB65 - Sets the zero flag to the compliment of the 4th bit of L.
     * @param ops unused.
     */
    Void bit_4_l(int[] ops) {
        this.bit(4, this.L);
        return null;
    }

    /**
     * OP code 0xCB66 - Sets the zero flag to the compliment of the 4th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void bit_4_hlp(int[] ops) {
        this.bit(4, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0xCB67 - Sets the zero flag to the compliment of the 4th bit of A.
     * @param ops unused.
     */
    Void bit_4_a(int[] ops) {
        this.bit(4, this.A);
        return null;
    }

    /**
     * OP code 0xCB68 - Sets the zero flag to the compliment of the 5th bit of B.
     * @param ops unused.
     */
    Void bit_5_b(int[] ops) {
        this.bit(5, this.B);
        return null;
    }

    /**
     * OP code 0xCB69 - Sets the zero flag to the compliment of the 5th bit of C.
     * @param ops unused.
     */
    Void bit_5_c(int[] ops) {
        this.bit(5, this.C);
        return null;
    }

    /**
     * OP code 0xCB6A - Sets the zero flag to the compliment of the 5th bit of D.
     * @param ops unused.
     */
    Void bit_5_d(int[] ops) {
        this.bit(5, this.D);
        return null;
    }

    /**
     * OP code 0xCB6B - Sets the zero flag to the compliment of the 5th bit of E.
     * @param ops unused.
     */
    Void bit_5_e(int[] ops) {
        this.bit(5, this.E);
        return null;
    }

    /**
     * OP code 0xCB6C - Sets the zero flag to the compliment of the 5th bit of H.
     * @param ops unused.
     */
    Void bit_5_h(int[] ops) {
        this.bit(5, this.H);
        return null;
    }

    /**
     * OP code 0xCB6D - Sets the zero flag to the compliment of the 5th bit of L.
     * @param ops unused.
     */
    Void bit_5_l(int[] ops) {
        this.bit(5, this.L);
        return null;
    }

    /**
     * OP code 0xCB6E - Sets the zero flag to the compliment of the 5th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void bit_5_hlp(int[] ops) {
        this.bit(5, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0xCB6F - Sets the zero flag to the compliment of the 5th bit of A.
     * @param ops unused.
     */
    Void bit_5_a(int[] ops) {
        this.bit(5, this.A);
        return null;
    }

    /**
     * OP code 0xCB70 - Sets the zero flag to the compliment of the 6th bit of B.
     * @param ops unused.
     */
    Void bit_6_b(int[] ops) {
        this.bit(6, this.B);
        return null;
    }

    /**
     * OP code 0xCB71 - Sets the zero flag to the compliment of the 6th bit of C.
     * @param ops unused.
     */
    Void bit_6_c(int[] ops) {
        this.bit(6, this.C);
        return null;
    }

    /**
     * OP code 0xCB72 - Sets the zero flag to the compliment of the 6th bit of D.
     * @param ops unused.
     */
    Void bit_6_d(int[] ops) {
        this.bit(6, this.D);
        return null;
    }

    /**
     * OP code 0xCB73 - Sets the zero flag to the compliment of the 6th bit of E.
     * @param ops unused.
     */
    Void bit_6_e(int[] ops) {
        this.bit(6, this.E);
        return null;
    }

    /**
     * OP code 0xCB74 - Sets the zero flag to the compliment of the 6th bit of H.
     * @param ops unused.
     */
    Void bit_6_h(int[] ops) {
        this.bit(6, this.H);
        return null;
    }

    /**
     * OP code 0xCB75 - Sets the zero flag to the compliment of the 6th bit of L.
     * @param ops unused.
     */
    Void bit_6_l(int[] ops) {
        this.bit(6, this.L);
        return null;
    }

    /**
     * OP code 0xCB76 - Sets the zero flag to the compliment of the 6th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void bit_6_hlp(int[] ops) {
        this.bit(6, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0xCB77 - Sets the zero flag to the compliment of the 6th bit of A.
     * @param ops unused.
     */
    Void bit_6_a(int[] ops) {
        this.bit(6, this.A);
        return null;
    }

    /**
     * OP code 0xCB78 - Sets the zero flag to the compliment of the 7th bit of B.
     * @param ops unused.
     */
    Void bit_7_b(int[] ops) {
        this.bit(7, this.B);
        return null;
    }

    /**
     * OP code 0xCB79 - Sets the zero flag to the compliment of the 7th bit of C.
     * @param ops unused.
     */
    Void bit_7_c(int[] ops) {
        this.bit(7, this.C);
        return null;
    }

    /**
     * OP code 0xCB7A - Sets the zero flag to the compliment of the 7th bit of D.
     * @param ops unused.
     */
    Void bit_7_d(int[] ops) {
        this.bit(7, this.D);
        return null;
    }

    /**
     * OP code 0xCB7B - Sets the zero flag to the compliment of the 7th bit of E.
     * @param ops unused.
     */
    Void bit_7_e(int[] ops) {
        this.bit(7, this.E);
        return null;
    }

    /**
     * OP code 0xCB7C - Sets the zero flag to the compliment of the 7th bit of H.
     * @param ops unused.
     */
    Void bit_7_h(int[] ops) {
        this.bit(7, this.H);
        return null;
    }

    /**
     * OP code 0xCB7D - Sets the zero flag to the compliment of the 7th bit of L.
     * @param ops unused.
     */
    Void bit_7_l(int[] ops) {
        this.bit(7, this.L);
        return null;
    }

    /**
     * OP code 0xCB7E - Sets the zero flag to the compliment of the 7th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void bit_7_hlp(int[] ops) {
        this.bit(7, this.memory.getByteAt(this.getHL()));
        return null;
    }

    /**
     * OP code 0xCB7F - Sets the zero flag to the compliment of the 7th bit of A.
     * @param ops unused.
     */
    Void bit_7_a(int[] ops) {
        this.bit(7, this.A);
        return null;
    }

    /**
     * OP code 0xCB80 - Resets the 0th bit of B.
     * @param ops unused.
     */
    Void res_0_b(int[] ops) {
        this.B = this.res(0, this.B);
        return null;
    }

    /**
     * OP code 0xCB81 - Resets the 0th bit of C.
     * @param ops unused.
     */
    Void res_0_c(int[] ops) {
        this.C = this.res(0, this.C);
        return null;
    }

    /**
     * OP code 0xCB82 - Resets the 0th bit of D.
     * @param ops unused.
     */
    Void res_0_d(int[] ops) {
        this.D = this.res(0, this.D);
        return null;
    }

    /**
     * OP code 0xCB83 - Resets the 0th bit of E.
     * @param ops unused.
     */
    Void res_0_e(int[] ops) {
        this.E = this.res(0, this.E);
        return null;
    }

    /**
     * OP code 0xCB84 - Resets the 0th bit of H.
     * @param ops unused.
     */
    Void res_0_h(int[] ops) {
        this.H = this.res(0, this.H);
        return null;
    }

    /**
     * OP code 0xCB85 - Resets the 0th bit of L.
     * @param ops unused.
     */
    Void res_0_l(int[] ops) {
        this.L = this.res(0, this.L);
        return null;
    }

    /**
     * OP code 0xCB86 - Resets the 0th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void res_0_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.res(0, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB87 - Resets the 0th bit of A.
     * @param ops unused.
     */
    Void res_0_a(int[] ops) {
        this.A = this.res(0, this.A);
        return null;
    }

    /**
     * OP code 0xCB88 - Resets the 1st bit of B.
     * @param ops unused.
     */
    Void res_1_b(int[] ops) {
        this.B = this.res(1, this.B);
        return null;
    }

    /**
     * OP code 0xCB89 - Resets the 1st bit of C.
     * @param ops unused.
     */
    Void res_1_c(int[] ops) {
        this.C = this.res(1, this.C);
        return null;
    }

    /**
     * OP code 0xCB8A - Resets the 1st bit of D.
     * @param ops unused.
     */
    Void res_1_d(int[] ops) {
        this.D = this.res(1, this.D);
        return null;
    }

    /**
     * OP code 0xCB8B - Resets the 1st bit of E.
     * @param ops unused.
     */
    Void res_1_e(int[] ops) {
        this.E = this.res(1, this.E);
        return null;
    }

    /**
     * OP code 0xCB8C - Resets the 1st bit of H.
     * @param ops unused.
     */
    Void res_1_h(int[] ops) {
        this.H = this.res(1, this.H);
        return null;
    }

    /**
     * OP code 0xCB8D - Resets the 1st bit of L.
     * @param ops unused.
     */
    Void res_1_l(int[] ops) {
        this.L = this.res(1, this.L);
        return null;
    }

    /**
     * OP code 0xCB8E - Resets the 1st bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void res_1_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.res(1, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB8F - Resets the 1st bit of A.
     * @param ops unused.
     */
    Void res_1_a(int[] ops) {
        this.A = this.res(1, this.A);
        return null;
    }

    /**
     * OP code 0xCB90 - Resets the 2nd bit of B.
     * @param ops unused.
     */
    Void res_2_b(int[] ops) {
        this.B = this.res(2, this.B);
        return null;
    }

    /**
     * OP code 0xCB91 - Resets the 2nd bit of C.
     * @param ops unused.
     */
    Void res_2_c(int[] ops) {
        this.C = this.res(2, this.C);
        return null;
    }

    /**
     * OP code 0xCB92 - Resets the 2nd bit of D.
     * @param ops unused.
     */
    Void res_2_d(int[] ops) {
        this.D = this.res(2, this.D);
        return null;
    }

    /**
     * OP code 0xCB93 - Resets the 2nd bit of E.
     * @param ops unused.
     */
    Void res_2_e(int[] ops) {
        this.E = this.res(2, this.E);
        return null;
    }

    /**
     * OP code 0xCB94 - Resets the 2nd bit of H.
     * @param ops unused.
     */
    Void res_2_h(int[] ops) {
        this.H = this.res(2, this.H);
        return null;
    }

    /**
     * OP code 0xCB95 - Resets the 2nd bit of L.
     * @param ops unused.
     */
    Void res_2_l(int[] ops) {
        this.L = this.res(2, this.L);
        return null;
    }

    /**
     * OP code 0xCB96 - Resets the 2nd bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void res_2_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.res(2, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB97 - Resets the 2nd bit of A.
     * @param ops unused.
     */
    Void res_2_a(int[] ops) {
        this.A = this.res(2, this.A);
        return null;
    }

    /**
     * OP code 0xCB98 - Resets the 3rd bit of B.
     * @param ops unused.
     */
    Void res_3_b(int[] ops) {
        this.B = this.res(3, this.B);
        return null;
    }

    /**
     * OP code 0xCB99 - Resets the 3rd bit of C.
     * @param ops unused.
     */
    Void res_3_c(int[] ops) {
        this.C = this.res(3, this.C);
        return null;
    }

    /**
     * OP code 0xCB9A - Resets the 3rd bit of D.
     * @param ops unused.
     */
    Void res_3_d(int[] ops) {
        this.D = this.res(3, this.D);
        return null;
    }

    /**
     * OP code 0xCB9B - Resets the 3rd bit of E.
     * @param ops unused.
     */
    Void res_3_e(int[] ops) {
        this.E = this.res(3, this.E);
        return null;
    }

    /**
     * OP code 0xCB9C - Resets the 3rd bit of H.
     * @param ops unused.
     */
    Void res_3_h(int[] ops) {
        this.H = this.res(3, this.H);
        return null;
    }

    /**
     * OP code 0xCB9D - Resets the 3rd bit of L.
     * @param ops unused.
     */
    Void res_3_l(int[] ops) {
        this.L = this.res(3, this.L);
        return null;
    }

    /**
     * OP code 0xCB9E - Resets the 3rd bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void res_3_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.res(3, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCB9F - Resets the 3rd bit of A.
     * @param ops unused.
     */
    Void res_3_a(int[] ops) {
        this.A = this.res(3, this.A);
        return null;
    }

    /**
     * OP code 0xCBA0 - Resets the 4th bit of B.
     * @param ops unused.
     */
    Void res_4_b(int[] ops) {
        this.B = this.res(4, this.B);
        return null;
    }

    /**
     * OP code 0xCBA1 - Resets the 4th bit of C.
     * @param ops unused.
     */
    Void res_4_c(int[] ops) {
        this.C = this.res(4, this.C);
        return null;
    }

    /**
     * OP code 0xCBA2 - Resets the 4th bit of D.
     * @param ops unused.
     */
    Void res_4_d(int[] ops) {
        this.D = this.res(4, this.D);
        return null;
    }

    /**
     * OP code 0xCBA3 - Resets the 4th bit of E.
     * @param ops unused.
     */
    Void res_4_e(int[] ops) {
        this.E = this.res(4, this.E);
        return null;
    }

    /**
     * OP code 0xCBA4 - Resets the 4th bit of H.
     * @param ops unused.
     */
    Void res_4_h(int[] ops) {
        this.H = this.res(4, this.H);
        return null;
    }

    /**
     * OP code 0xCBA5 - Resets the 4th bit of L.
     * @param ops unused.
     */
    Void res_4_l(int[] ops) {
        this.L = this.res(4, this.L);
        return null;
    }

    /**
     * OP code 0xCBA6 - Resets the 4th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void res_4_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.res(4, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBA7 - Resets the 4th bit of A.
     * @param ops unused.
     */
    Void res_4_a(int[] ops) {
        this.A = this.res(4, this.A);
        return null;
    }

    /**
     * OP code 0xCBA8 - Resets the 5th bit of B.
     * @param ops unused.
     */
    Void res_5_b(int[] ops) {
        this.B = this.res(5, this.B);
        return null;
    }

    /**
     * OP code 0xCBA9 - Resets the 5th bit of C.
     * @param ops unused.
     */
    Void res_5_c(int[] ops) {
        this.C = this.res(5, this.C);
        return null;
    }

    /**
     * OP code 0xCBAA - Resets the 5th bit of D.
     * @param ops unused.
     */
    Void res_5_d(int[] ops) {
        this.D = this.res(5, this.D);
        return null;
    }

    /**
     * OP code 0xCBAB - Resets the 5th bit of E.
     * @param ops unused.
     */
    Void res_5_e(int[] ops) {
        this.E = this.res(5, this.E);
        return null;
    }

    /**
     * OP code 0xCBAC - Resets the 5th bit of H.
     * @param ops unused.
     */
    Void res_5_h(int[] ops) {
        this.H = this.res(5, this.H);
        return null;
    }

    /**
     * OP code 0xCBAD - Resets the 5th bit of L.
     * @param ops unused.
     */
    Void res_5_l(int[] ops) {
        this.L = this.res(5, this.L);
        return null;
    }

    /**
     * OP code 0xCBAE - Resets the 5th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void res_5_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.res(5, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBAF - Resets the 5th bit of A.
     * @param ops unused.
     */
    Void res_5_a(int[] ops) {
        this.A = this.res(5, this.A);
        return null;
    }

    /**
     * OP code 0xCBB0 - Resets the 6th bit of B.
     * @param ops unused.
     */
    Void res_6_b(int[] ops) {
        this.B = this.res(6, this.B);
        return null;
    }

    /**
     * OP code 0xCBB1 - Resets the 6th bit of C.
     * @param ops unused.
     */
    Void res_6_c(int[] ops) {
        this.C = this.res(6, this.C);
        return null;
    }

    /**
     * OP code 0xCBB2 - Resets the 6th bit of D.
     * @param ops unused.
     */
    Void res_6_d(int[] ops) {
        this.D = this.res(6, this.D);
        return null;
    }

    /**
     * OP code 0xCBB3 - Resets the 6th bit of E.
     * @param ops unused.
     */
    Void res_6_e(int[] ops) {
        this.E = this.res(6, this.E);
        return null;
    }

    /**
     * OP code 0xCBB4 - Resets the 6th bit of H.
     * @param ops unused.
     */
    Void res_6_h(int[] ops) {
        this.H = this.res(6, this.H);
        return null;
    }

    /**
     * OP code 0xCBB5 - Resets the 6th bit of L.
     * @param ops unused.
     */
    Void res_6_l(int[] ops) {
        this.L = this.res(6, this.L);
        return null;
    }

    /**
     * OP code 0xCBB6 - Resets the 6th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void res_6_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.res(6, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBB7 - Resets the 6th bit of A.
     * @param ops unused.
     */
    Void res_6_a(int[] ops) {
        this.A = this.res(6, this.A);
        return null;
    }

    /**
     * OP code 0xCBB8 - Resets the 7th bit of B.
     * @param ops unused.
     */
    Void res_7_b(int[] ops) {
        this.B = this.res(7, this.B);
        return null;
    }

    /**
     * OP code 0xCBB9 - Resets the 7th bit of C.
     * @param ops unused.
     */
    Void res_7_c(int[] ops) {
        this.C = this.res(7, this.C);
        return null;
    }

    /**
     * OP code 0xCBBA - Resets the 7th bit of D.
     * @param ops unused.
     */
    Void res_7_d(int[] ops) {
        this.D = this.res(7, this.D);
        return null;
    }

    /**
     * OP code 0xCBBB - Resets the 7th bit of E.
     * @param ops unused.
     */
    Void res_7_e(int[] ops) {
        this.E = this.res(7, this.E);
        return null;
    }

    /**
     * OP code 0xCBBC - Resets the 7th bit of H.
     * @param ops unused.
     */
    Void res_7_h(int[] ops) {
        this.H = this.res(7, this.H);
        return null;
    }

    /**
     * OP code 0xCBBD - Resets the 7th bit of L.
     * @param ops unused.
     */
    Void res_7_l(int[] ops) {
        this.L = this.res(7, this.L);
        return null;
    }

    /**
     * OP code 0xCBBE - Resets the 7th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void res_7_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.res(7, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBBF - Resets the 7th bit of A.
     * @param ops unused.
     */
    Void res_7_a(int[] ops) {
        this.A = this.res(7, this.A);
        return null;
    }

    /**
     * OP code 0xCBC0 - Sets the 0th bit of B.
     * @param ops unused.
     */
    Void set_0_b(int[] ops) {
        this.B = this.set(0, this.B);
        return null;
    }

    /**
     * OP code 0xCBC1 - Sets the 0th bit of C.
     * @param ops unused.
     */
    Void set_0_c(int[] ops) {
        this.C = this.set(0, this.C);
        return null;
    }

    /**
     * OP code 0xCBC2 - Sets the 0th bit of D.
     * @param ops unused.
     */
    Void set_0_d(int[] ops) {
        this.D = this.set(0, this.D);
        return null;
    }

    /**
     * OP code 0xCBC3 - Sets the 0th bit of E.
     * @param ops unused.
     */
    Void set_0_e(int[] ops) {
        this.E = this.set(0, this.E);
        return null;
    }

    /**
     * OP code 0xCBC4 - Sets the 0th bit of H.
     * @param ops unused.
     */
    Void set_0_h(int[] ops) {
        this.H = this.set(0, this.H);
        return null;
    }

    /**
     * OP code 0xCBC5 - Sets the 0th bit of L.
     * @param ops unused.
     */
    Void set_0_l(int[] ops) {
        this.L = this.set(0, this.L);
        return null;
    }

    /**
     * OP code 0xCBC6 - Sets the 0th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void set_0_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.set(0, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBC7 - Sets the 0th bit of A.
     * @param ops unused.
     */
    Void set_0_a(int[] ops) {
        this.A = this.set(0, this.A);
        return null;
    }

    /**
     * OP code 0xCBC8 - Sets the 1st bit of B.
     * @param ops unused.
     */
    Void set_1_b(int[] ops) {
        this.B = this.set(1, this.B);
        return null;
    }

    /**
     * OP code 0xCBC9 - Sets the 1st bit of C.
     * @param ops unused.
     */
    Void set_1_c(int[] ops) {
        this.C = this.set(1, this.C);
        return null;
    }

    /**
     * OP code 0xCBCA - Sets the 1st bit of D.
     * @param ops unused.
     */
    Void set_1_d(int[] ops) {
        this.D = this.set(1, this.D);
        return null;
    }

    /**
     * OP code 0xCBCB - Sets the 1st bit of E.
     * @param ops unused.
     */
    Void set_1_e(int[] ops) {
        this.E = this.set(1, this.E);
        return null;
    }

    /**
     * OP code 0xCBCC - Sets the 1st bit of H.
     * @param ops unused.
     */
    Void set_1_h(int[] ops) {
        this.H = this.set(1, this.H);
        return null;
    }

    /**
     * OP code 0xCBCD - Sets the 1st bit of L.
     * @param ops unused.
     */
    Void set_1_l(int[] ops) {
        this.L = this.set(1, this.L);
        return null;
    }

    /**
     * OP code 0xCBCE - Sets the 1st bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void set_1_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.set(1, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBCF - Sets the 1st bit of A.
     * @param ops unused.
     */
    Void set_1_a(int[] ops) {
        this.A = this.set(1, this.A);
        return null;
    }

    /**
     * OP code 0xCBD0 - Sets the 2nd bit of B.
     * @param ops unused.
     */
    Void set_2_b(int[] ops) {
        this.B = this.set(2, this.B);
        return null;
    }

    /**
     * OP code 0xCBD1 - Sets the 2nd bit of C.
     * @param ops unused.
     */
    Void set_2_c(int[] ops) {
        this.C = this.set(2, this.C);
        return null;
    }

    /**
     * OP code 0xCBD2 - Sets the 2nd bit of D.
     * @param ops unused.
     */
    Void set_2_d(int[] ops) {
        this.D = this.set(2, this.D);
        return null;
    }

    /**
     * OP code 0xCBD3 - Sets the 2nd bit of E.
     * @param ops unused.
     */
    Void set_2_e(int[] ops) {
        this.E = this.set(2, this.E);
        return null;
    }

    /**
     * OP code 0xCBD4 - Sets the 2nd bit of H.
     * @param ops unused.
     */
    Void set_2_h(int[] ops) {
        this.H = this.set(2, this.H);
        return null;
    }

    /**
     * OP code 0xCBD5 - Sets the 2nd bit of L.
     * @param ops unused.
     */
    Void set_2_l(int[] ops) {
        this.L = this.set(2, this.L);
        return null;
    }

    /**
     * OP code 0xCBD6 - Sets the 2nd bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void set_2_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.set(2, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBD7 - Sets the 2nd bit of A.
     * @param ops unused.
     */
    Void set_2_a(int[] ops) {
        this.A = this.set(2, this.A);
        return null;
    }

    /**
     * OP code 0xCBD8 - Sets the 3rd bit of B.
     * @param ops unused.
     */
    Void set_3_b(int[] ops) {
        this.B = this.set(3, this.B);
        return null;
    }

    /**
     * OP code 0xCBD9 - Sets the 3rd bit of C.
     * @param ops unused.
     */
    Void set_3_c(int[] ops) {
        this.C = this.set(3, this.C);
        return null;
    }

    /**
     * OP code 0xCBDA - Sets the 3rd bit of D.
     * @param ops unused.
     */
    Void set_3_d(int[] ops) {
        this.D = this.set(3, this.D);
        return null;
    }

    /**
     * OP code 0xCBDB - Sets the 3rd bit of E.
     * @param ops unused.
     */
    Void set_3_e(int[] ops) {
        this.E = this.set(3, this.E);
        return null;
    }

    /**
     * OP code 0xCBDC - Sets the 3rd bit of H.
     * @param ops unused.
     */
    Void set_3_h(int[] ops) {
        this.H = this.set(3, this.H);
        return null;
    }

    /**
     * OP code 0xCBDD - Sets the 3rd bit of L.
     * @param ops unused.
     */
    Void set_3_l(int[] ops) {
        this.L = this.set(3, this.L);
        return null;
    }

    /**
     * OP code 0xCBDE - Sets the 3rd bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void set_3_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.set(3, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBDF - Sets the 3rd bit of A.
     * @param ops unused.
     */
    Void set_3_a(int[] ops) {
        this.A = this.set(3, this.A);
        return null;
    }

    /**
     * OP code 0xCBE0 - Sets the 4th bit of B.
     * @param ops unused.
     */
    Void set_4_b(int[] ops) {
        this.B = this.set(4, this.B);
        return null;
    }

    /**
     * OP code 0xCBE1 - Sets the 4th bit of C.
     * @param ops unused.
     */
    Void set_4_c(int[] ops) {
        this.C = this.set(4, this.C);
        return null;
    }

    /**
     * OP code 0xCBE2 - Sets the 4th bit of D.
     * @param ops unused.
     */
    Void set_4_d(int[] ops) {
        this.D = this.set(4, this.D);
        return null;
    }

    /**
     * OP code 0xCBE3 - Sets the 4th bit of E.
     * @param ops unused.
     */
    Void set_4_e(int[] ops) {
        this.E = this.set(4, this.E);
        return null;
    }

    /**
     * OP code 0xCBE4 - Sets the 4th bit of H.
     * @param ops unused.
     */
    Void set_4_h(int[] ops) {
        this.H = this.set(4, this.H);
        return null;
    }

    /**
     * OP code 0xCBE5 - Sets the 4th bit of L.
     * @param ops unused.
     */
    Void set_4_l(int[] ops) {
        this.L = this.set(4, this.L);
        return null;
    }

    /**
     * OP code 0xCBE6 - Sets the 4th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void set_4_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.set(4, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBE7 - Sets the 4th bit of A.
     * @param ops unused.
     */
    Void set_4_a(int[] ops) {
        this.A = this.set(4, this.A);
        return null;
    }

    /**
     * OP code 0xCBE8 - Sets the 5th bit of B.
     * @param ops unused.
     */
    Void set_5_b(int[] ops) {
        this.B = this.set(5, this.B);
        return null;
    }

    /**
     * OP code 0xCBE9 - Sets the 5th bit of C.
     * @param ops unused.
     */
    Void set_5_c(int[] ops) {
        this.C = this.set(5, this.C);
        return null;
    }

    /**
     * OP code 0xCBEA - Sets the 5th bit of D.
     * @param ops unused.
     */
    Void set_5_d(int[] ops) {
        this.D = this.set(5, this.D);
        return null;
    }

    /**
     * OP code 0xCBEB - Sets the 5th bit of E.
     * @param ops unused.
     */
    Void set_5_e(int[] ops) {
        this.E = this.set(5, this.E);
        return null;
    }

    /**
     * OP code 0xCBEC - Sets the 5th bit of H.
     * @param ops unused.
     */
    Void set_5_h(int[] ops) {
        this.H = this.set(5, this.H);
        return null;
    }

    /**
     * OP code 0xCBED - Sets the 5th bit of L.
     * @param ops unused.
     */
    Void set_5_l(int[] ops) {
        this.L = this.set(5, this.L);
        return null;
    }

    /**
     * OP code 0xCBEE - Sets the 5th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void set_5_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.set(5, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBEF - Sets the 5th bit of A.
     * @param ops unused.
     */
    Void set_5_a(int[] ops) {
        this.A = this.set(5, this.A);
        return null;
    }

    /**
     * OP code 0xCBF0 - Sets the 6th bit of B.
     * @param ops unused.
     */
    Void set_6_b(int[] ops) {
        this.B = this.set(6, this.B);
        return null;
    }

    /**
     * OP code 0xCBF1 - Sets the 6th bit of C.
     * @param ops unused.
     */
    Void set_6_c(int[] ops) {
        this.C = this.set(6, this.C);
        return null;
    }

    /**
     * OP code 0xCBF2 - Sets the 6th bit of D.
     * @param ops unused.
     */
    Void set_6_d(int[] ops) {
        this.D = this.set(6, this.D);
        return null;
    }

    /**
     * OP code 0xCBF3 - Sets the 6th bit of E.
     * @param ops unused.
     */
    Void set_6_e(int[] ops) {
        this.E = this.set(6, this.E);
        return null;
    }

    /**
     * OP code 0xCBF4 - Sets the 6th bit of H.
     * @param ops unused.
     */
    Void set_6_h(int[] ops) {
        this.H = this.set(6, this.H);
        return null;
    }

    /**
     * OP code 0xCBF5 - Sets the 6th bit of L.
     * @param ops unused.
     */
    Void set_6_l(int[] ops) {
        this.L = this.set(6, this.L);
        return null;
    }

    /**
     * OP code 0xCBF6 - Sets the 6th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void set_6_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.set(6, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBF7 - Sets the 6th bit of A.
     * @param ops unused.
     */
    Void set_6_a(int[] ops) {
        this.A = this.set(6, this.A);
        return null;
    }

    /**
     * OP code 0xCBF8 - Sets the 7th bit of B.
     * @param ops unused.
     */
    Void set_7_b(int[] ops) {
        this.B = this.set(7, this.B);
        return null;
    }

    /**
     * OP code 0xCBF9 - Sets the 7th bit of C.
     * @param ops unused.
     */
    Void set_7_c(int[] ops) {
        this.C = this.set(7, this.C);
        return null;
    }

    /**
     * OP code 0xCBFA - Sets the 7th bit of D.
     * @param ops unused.
     */
    Void set_7_d(int[] ops) {
        this.D = this.set(7, this.D);
        return null;
    }

    /**
     * OP code 0xCBFB - Sets the 7th bit of E.
     * @param ops unused.
     */
    Void set_7_e(int[] ops) {
        this.E = this.set(7, this.E);
        return null;
    }

    /**
     * OP code 0xCBFC - Sets the 7th bit of H.
     * @param ops unused.
     */
    Void set_7_h(int[] ops) {
        this.H = this.set(7, this.H);
        return null;
    }

    /**
     * OP code 0xCBFD - Sets the 7th bit of L.
     * @param ops unused.
     */
    Void set_7_l(int[] ops) {
        this.L = this.set(7, this.L);
        return null;
    }

    /**
     * OP code 0xCBFE - Sets the 7th bit of the value in memory pointed to by HL.
     * @param ops unused.
     */
    Void set_7_hlp(int[] ops) {
        this.memory.setByteAt(this.getHL(), this.set(7, this.memory.getByteAt(this.getHL())));
        return null;
    }

    /**
     * OP code 0xCBFF - Sets the 7th bit of A.
     * @param ops unused.
     */
    Void set_7_a(int[] ops) {
        this.A = this.set(7, this.A);
        return null;
    }
    // endregion
}
