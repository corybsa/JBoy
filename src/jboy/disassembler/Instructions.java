package jboy.disassembler;

import java.util.HashMap;

/**
 * All the instructions available to the GameBoy's Z80 processor.
 */
final class Instructions {
    static final HashMap<Byte, Instruction<Byte>> GB_8BIT_INSTRUCTIONS = new HashMap<>();
    static final HashMap<Short, Instruction<Short>> GB_16BIT_INSTRUCTIONS = new HashMap<>();

    static {
        /*############################################################################
                                    8 Bit Instructions
        ############################################################################*/
        GB_8BIT_INSTRUCTIONS.put((byte)0x00, new Instruction<>((byte)0x00, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x01, new Instruction<>((byte)0x01, "LD BC,**", (byte)3, (byte)12));
        GB_8BIT_INSTRUCTIONS.put((byte)0x02, new Instruction<>((byte)0x02, "LD (BC),A", (byte)1, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x03, new Instruction<>((byte)0x03, "INC BC", (byte)1, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x04, new Instruction<>((byte)0x04, "INC C", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x05, new Instruction<>((byte)0x05, "DEC B", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x06, new Instruction<>((byte)0x06, "LD B,*", (byte)2, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x07, new Instruction<>((byte)0x07, "RLCA", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x08, new Instruction<>((byte)0x08, "LD (**),SP", (byte)3, (byte)20));
        GB_8BIT_INSTRUCTIONS.put((byte)0x09, new Instruction<>((byte)0x09, "ADD HL,BC", (byte)1, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x0A, new Instruction<>((byte)0x0A, "LD A,(BC)", (byte)1, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x0B, new Instruction<>((byte)0x0B, "DEC BC", (byte)1, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x0C, new Instruction<>((byte)0x0C, "INC C", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x0D, new Instruction<>((byte)0x0D, "DEC C", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x0E, new Instruction<>((byte)0x0E, "LD C,*", (byte)2, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x0F, new Instruction<>((byte)0x0F, "RRCA", (byte)1, (byte)4));

        GB_8BIT_INSTRUCTIONS.put((byte)0x10, new Instruction<>((byte)0x10, "STOP 0", (byte)2, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x11, new Instruction<>((byte)0x11, "LD DE,**", (byte)3, (byte)12));
        GB_8BIT_INSTRUCTIONS.put((byte)0x12, new Instruction<>((byte)0x12, "LD (DE),A", (byte)1, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x13, new Instruction<>((byte)0x13, "INC DE", (byte)1, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x14, new Instruction<>((byte)0x14, "INC D", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x15, new Instruction<>((byte)0x15, "DEC D", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x16, new Instruction<>((byte)0x16, "LD D,*", (byte)2, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x17, new Instruction<>((byte)0x17, "RLA", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x18, new Instruction<>((byte)0x18, "JR *", (byte)2, (byte)12));
        GB_8BIT_INSTRUCTIONS.put((byte)0x19, new Instruction<>((byte)0x19, "ADD HL,DE", (byte)1, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x1A, new Instruction<>((byte)0x1A, "LD A,(DE)", (byte)1, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x1B, new Instruction<>((byte)0x1B, "DEC DE", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x1C, new Instruction<>((byte)0x1C, "INC E", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x1D, new Instruction<>((byte)0x1D, "DEC E", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0x1E, new Instruction<>((byte)0x1E, "LD E,*", (byte)2, (byte)8));
        GB_8BIT_INSTRUCTIONS.put((byte)0x1F, new Instruction<>((byte)0x1F, "RRA", (byte)1, (byte)4));

        GB_8BIT_INSTRUCTIONS.put((byte)0x20, new Instruction<>((byte)0x20, "JR NZ,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x21, new Instruction<>((byte)0x21, "LD HL,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x22, new Instruction<>((byte)0x22, "LD (HL+),A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x23, new Instruction<>((byte)0x23, "INC HL", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x24, new Instruction<>((byte)0x24, "INC H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x25, new Instruction<>((byte)0x25, "DEC H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x26, new Instruction<>((byte)0x26, "LD H,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x27, new Instruction<>((byte)0x27, "DAA", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x28, new Instruction<>((byte)0x28, "JR Z,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x29, new Instruction<>((byte)0x29, "ADD HL,HL", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x2A, new Instruction<>((byte)0x2A, "LD A,(HL+)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x2B, new Instruction<>((byte)0x2B, "DEC HL", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x2C, new Instruction<>((byte)0x2C, "INC L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x2D, new Instruction<>((byte)0x2D, "DEC L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x2E, new Instruction<>((byte)0x2E, "LD L,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x2F, new Instruction<>((byte)0x2F, "CPL", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0x30, new Instruction<>((byte)0x30, "JR NC,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x31, new Instruction<>((byte)0x31, "LD SP,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x32, new Instruction<>((byte)0x32, "LD (HL-),A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x33, new Instruction<>((byte)0x33, "INC SP", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x34, new Instruction<>((byte)0x34, "INC (HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x35, new Instruction<>((byte)0x35, "DEC (HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x36, new Instruction<>((byte)0x36, "LD (HL),*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x37, new Instruction<>((byte)0x37, "SCF", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x38, new Instruction<>((byte)0x38, "JR C,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x39, new Instruction<>((byte)0x39, "ADD HL,SP", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x3A, new Instruction<>((byte)0x3A, "LD A,(HL-)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x3B, new Instruction<>((byte)0x3B, "DEC SP", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x3C, new Instruction<>((byte)0x3C, "INC A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x3D, new Instruction<>((byte)0x3D, "DEC A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x3E, new Instruction<>((byte)0x3E, "LD A,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x3F, new Instruction<>((byte)0x3F, "CCF", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0x40, new Instruction<>((byte)0x40, "LD B,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x41, new Instruction<>((byte)0x41, "LD B,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x42, new Instruction<>((byte)0x42, "LD B,D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x43, new Instruction<>((byte)0x43, "LD B,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x44, new Instruction<>((byte)0x44, "LD B,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x45, new Instruction<>((byte)0x45, "LD B,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x46, new Instruction<>((byte)0x46, "LD B,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x47, new Instruction<>((byte)0x47, "LD B,A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x48, new Instruction<>((byte)0x48, "LD C,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x49, new Instruction<>((byte)0x49, "LD C,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x4A, new Instruction<>((byte)0x4A, "LD C,D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x4B, new Instruction<>((byte)0x4B, "LD C,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x4C, new Instruction<>((byte)0x4C, "LD C,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x4D, new Instruction<>((byte)0x4D, "LD C,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x4E, new Instruction<>((byte)0x4E, "LD C,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x4F, new Instruction<>((byte)0x4F, "LC C,A", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0x50, new Instruction<>((byte)0x50, "LD D,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x51, new Instruction<>((byte)0x51, "LD D,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x52, new Instruction<>((byte)0x52, "LD D,D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x53, new Instruction<>((byte)0x53, "LD D,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x54, new Instruction<>((byte)0x54, "LD D,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x55, new Instruction<>((byte)0x55, "LD D,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x56, new Instruction<>((byte)0x56, "LD D,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x57, new Instruction<>((byte)0x57, "LD D,A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x58, new Instruction<>((byte)0x58, "LD E,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x59, new Instruction<>((byte)0x59, "LD E,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x5A, new Instruction<>((byte)0x5A, "LD E,D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x5B, new Instruction<>((byte)0x5B, "LD E,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x5C, new Instruction<>((byte)0x5C, "LD E,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x5D, new Instruction<>((byte)0x5D, "LD E,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x5E, new Instruction<>((byte)0x5E, "LD E,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x5F, new Instruction<>((byte)0x5F, "LD E,A", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0x60, new Instruction<>((byte)0x60, "LD H,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x61, new Instruction<>((byte)0x61, "LD H,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x62, new Instruction<>((byte)0x62, "LD H,D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x63, new Instruction<>((byte)0x63, "LD H,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x64, new Instruction<>((byte)0x64, "LD H,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x65, new Instruction<>((byte)0x65, "LD H,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x66, new Instruction<>((byte)0x66, "LD H,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x67, new Instruction<>((byte)0x67, "LD H,A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x68, new Instruction<>((byte)0x68, "LD L,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x69, new Instruction<>((byte)0x69, "LD L,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x6A, new Instruction<>((byte)0x6A, "LD L,D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x6B, new Instruction<>((byte)0x6B, "LD L,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x6C, new Instruction<>((byte)0x6C, "LD L,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x6D, new Instruction<>((byte)0x6D, "LD L,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x6E, new Instruction<>((byte)0x6E, "LD L,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x6F, new Instruction<>((byte)0x6F, "LD L,A", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0x70, new Instruction<>((byte)0x70, "LD (HL),B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x71, new Instruction<>((byte)0x71, "LD (HL),C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x72, new Instruction<>((byte)0x72, "LD (HL),D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x73, new Instruction<>((byte)0x73, "LD (HL),E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x74, new Instruction<>((byte)0x74, "LD (HL),H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x75, new Instruction<>((byte)0x75, "LD (HL),L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x76, new Instruction<>((byte)0x76, "LD (HL),(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x77, new Instruction<>((byte)0x77, "LD (HL),A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x78, new Instruction<>((byte)0x78, "LD A,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x79, new Instruction<>((byte)0x79, "LD A,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x7A, new Instruction<>((byte)0x7A, "LD A,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x7B, new Instruction<>((byte)0x7B, "LD A,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x7C, new Instruction<>((byte)0x7C, "LD A,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x7D, new Instruction<>((byte)0x7D, "LD A,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x7E, new Instruction<>((byte)0x7E, "LD A,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x7F, new Instruction<>((byte)0x7F, "LD A,A", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0x80, new Instruction<>((byte)0x80, "ADD A,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x81, new Instruction<>((byte)0x81, "ADD A,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x82, new Instruction<>((byte)0x82, "ADD A,D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x83, new Instruction<>((byte)0x83, "ADD A,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x84, new Instruction<>((byte)0x84, "ADD A,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x85, new Instruction<>((byte)0x85, "ADD A,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x86, new Instruction<>((byte)0x86, "ADD A,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x87, new Instruction<>((byte)0x87, "ADD A,A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x88, new Instruction<>((byte)0x88, "ADC A,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x89, new Instruction<>((byte)0x89, "ADC A,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x8A, new Instruction<>((byte)0x8A, "ADC A,D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x8B, new Instruction<>((byte)0x8B, "ADC A,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x8C, new Instruction<>((byte)0x8C, "ADC A,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x8D, new Instruction<>((byte)0x8D, "ADC A,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x8E, new Instruction<>((byte)0x8E, "ADC A,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x8F, new Instruction<>((byte)0x8F, "ADC A,A", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0x90, new Instruction<>((byte)0x90, "SUB B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x91, new Instruction<>((byte)0x91, "SUB C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x92, new Instruction<>((byte)0x92, "SUB D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x93, new Instruction<>((byte)0x93, "SUB E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x94, new Instruction<>((byte)0x94, "SUB H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x95, new Instruction<>((byte)0x95, "SUB L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x96, new Instruction<>((byte)0x96, "SUB (HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x97, new Instruction<>((byte)0x97, "SUB A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x98, new Instruction<>((byte)0x98, "SBC A,B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x99, new Instruction<>((byte)0x99, "SBC A,C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x9A, new Instruction<>((byte)0x9A, "SBC A,D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x9B, new Instruction<>((byte)0x9B, "SBC A,E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x9C, new Instruction<>((byte)0x9C, "SBC A,H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x9D, new Instruction<>((byte)0x9D, "SBC A,L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x9E, new Instruction<>((byte)0x9E, "SBC A,(HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0x9F, new Instruction<>((byte)0x9F, "SBC A,A", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0xA0, new Instruction<>((byte)0xA0, "AND B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xA1, new Instruction<>((byte)0xA1, "AND C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xA2, new Instruction<>((byte)0xA2, "AND D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xA3, new Instruction<>((byte)0xA3, "AND E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xA4, new Instruction<>((byte)0xA4, "AND H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xA5, new Instruction<>((byte)0xA5, "AND L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xA6, new Instruction<>((byte)0xA6, "AND (HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xA7, new Instruction<>((byte)0xA7, "AND A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xA8, new Instruction<>((byte)0xA8, "XOR B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xA9, new Instruction<>((byte)0xA9, "XOR C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xAA, new Instruction<>((byte)0xAA, "XOR D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xAB, new Instruction<>((byte)0xAB, "XOR E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xAC, new Instruction<>((byte)0xAC, "XOR H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xAD, new Instruction<>((byte)0xAD, "XOR L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xAE, new Instruction<>((byte)0xAE, "XOR (HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xAF, new Instruction<>((byte)0xAF, "XOR A", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0xB0, new Instruction<>((byte)0xB0, "OR B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xB1, new Instruction<>((byte)0xB1, "OR C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xB2, new Instruction<>((byte)0xB2, "OR D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xB3, new Instruction<>((byte)0xB3, "OR E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xB4, new Instruction<>((byte)0xB4, "OR H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xB5, new Instruction<>((byte)0xB5, "OR L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xB6, new Instruction<>((byte)0xB6, "OR (HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xB7, new Instruction<>((byte)0xB7, "OR A", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xB8, new Instruction<>((byte)0xB8, "CP B", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xB9, new Instruction<>((byte)0xB9, "CP C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xBA, new Instruction<>((byte)0xBA, "CP D", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xBB, new Instruction<>((byte)0xBB, "CP E", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xBC, new Instruction<>((byte)0xBC, "CP H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xBD, new Instruction<>((byte)0xBD, "CP L", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xBE, new Instruction<>((byte)0xBE, "CP (HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xBF, new Instruction<>((byte)0xBF, "CP A", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0xC0, new Instruction<>((byte)0xC0, "RET NZ", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xC1, new Instruction<>((byte)0xC1, "POP BC", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xC2, new Instruction<>((byte)0xC2, "JP NZ,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xC3, new Instruction<>((byte)0xC3, "JP **", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xC4, new Instruction<>((byte)0xC4, "CALL NZ,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xC5, new Instruction<>((byte)0xC5, "PUSH BC", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xC6, new Instruction<>((byte)0xC6, "ADD A,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xC7, new Instruction<>((byte)0xC7, "RST 00H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xC8, new Instruction<>((byte)0xC8, "RET Z", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xC9, new Instruction<>((byte)0xC9, "RET", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xCA, new Instruction<>((byte)0xCA, "JP Z,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xCC, new Instruction<>((byte)0xCC, "CALL Z,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xCD, new Instruction<>((byte)0xCD, "CALL **", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xCE, new Instruction<>((byte)0xCE, "ADC A,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xCF, new Instruction<>((byte)0xCF, "RST 08H", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0xD0, new Instruction<>((byte)0xD0, "RET NC", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xD1, new Instruction<>((byte)0xD1, "POP DE", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xD2, new Instruction<>((byte)0xD2, "JP NC,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xD3, new Instruction<>((byte)0xD3, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xD4, new Instruction<>((byte)0xD4, "CALL NC,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xD5, new Instruction<>((byte)0xD5, "PUSH DE", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xD6, new Instruction<>((byte)0xD6, "SUB *", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xD7, new Instruction<>((byte)0xD7, "RST 10H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xD8, new Instruction<>((byte)0xD8, "RET C", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xD9, new Instruction<>((byte)0xD9, "RETI", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xDA, new Instruction<>((byte)0xDA, "JP C,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xDB, new Instruction<>((byte)0xDB, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xDC, new Instruction<>((byte)0xDC, "CALL C,**", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xDD, new Instruction<>((byte)0xDD, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xDE, new Instruction<>((byte)0xDE, "SBC A,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xDF, new Instruction<>((byte)0xDF, "RST 18H", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0xE0, new Instruction<>((byte)0xE0, "LDH (*),A", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xE1, new Instruction<>((byte)0xE1, "POP HL", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xE2, new Instruction<>((byte)0xE2, "LD (C),A", (byte)2, (byte)1)); // why is this 2 bytes??
        GB_8BIT_INSTRUCTIONS.put((byte)0xE3, new Instruction<>((byte)0xE3, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xE4, new Instruction<>((byte)0xE4, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xE5, new Instruction<>((byte)0xE5, "PUSH HL", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xE6, new Instruction<>((byte)0xE6, "AND *", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xE7, new Instruction<>((byte)0xE7, "RST 20H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xE8, new Instruction<>((byte)0xE8, "ADD SP,*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xE9, new Instruction<>((byte)0xE9, "JP (HL)", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xEA, new Instruction<>((byte)0xEA, "LD (**),A", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xEB, new Instruction<>((byte)0xEB, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xEC, new Instruction<>((byte)0xEC, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xED, new Instruction<>((byte)0xED, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xEE, new Instruction<>((byte)0xEE, "XOR *", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xEF, new Instruction<>((byte)0xEF, "RST 28H", (byte)1, (byte)1));

        GB_8BIT_INSTRUCTIONS.put((byte)0xF0, new Instruction<>((byte)0xF0, "LDH A,(*)", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xF1, new Instruction<>((byte)0xF1, "POP AF", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xF2, new Instruction<>((byte)0xF2, "LD A,(C)", (byte)2, (byte)1)); // why is this 2 bytes??
        GB_8BIT_INSTRUCTIONS.put((byte)0xF3, new Instruction<>((byte)0xF3, "DI", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xF4, new Instruction<>((byte)0xF4, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xF5, new Instruction<>((byte)0xF5, "PUSH AF", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xF6, new Instruction<>((byte)0xF6, "OR *", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xF7, new Instruction<>((byte)0xF7, "RST 30H", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xF8, new Instruction<>((byte)0xF8, "LD HL,SP+*", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xF9, new Instruction<>((byte)0xF9, "LD SP,HL", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xFA, new Instruction<>((byte)0xFA, "LD A,(**)", (byte)3, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xFB, new Instruction<>((byte)0xFB, "EI", (byte)1, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xFC, new Instruction<>((byte)0xFC, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xFD, new Instruction<>((byte)0xFD, "NOP", (byte)1, (byte)4));
        GB_8BIT_INSTRUCTIONS.put((byte)0xFE, new Instruction<>((byte)0xFE, "CP *", (byte)2, (byte)1));
        GB_8BIT_INSTRUCTIONS.put((byte)0xFF, new Instruction<>((byte)0xFF, "RST 38H", (byte)1, (byte)1));


        /*############################################################################
                                    16 Bit Instructions
        ############################################################################*/
        GB_16BIT_INSTRUCTIONS.put((short)0xCB00, new Instruction<>((short)0xCB00, "RLC B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB01, new Instruction<>((short)0xCB01, "RLC C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB02, new Instruction<>((short)0xCB02, "RLC D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB03, new Instruction<>((short)0xCB03, "RLC E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB04, new Instruction<>((short)0xCB04, "RLC H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB05, new Instruction<>((short)0xCB05, "RLC L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB06, new Instruction<>((short)0xCB06, "RLC (HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB07, new Instruction<>((short)0xCB07, "RLC A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB08, new Instruction<>((short)0xCB08, "RRC B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB09, new Instruction<>((short)0xCB09, "RRC C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB0A, new Instruction<>((short)0xCB0A, "RRC D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB0B, new Instruction<>((short)0xCB0B, "RRC E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB0C, new Instruction<>((short)0xCB0C, "RRC H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB0D, new Instruction<>((short)0xCB0D, "RRC L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB0E, new Instruction<>((short)0xCB0E, "RRC (HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB0F, new Instruction<>((short)0xCB0F, "RRC A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCB10, new Instruction<>((short)0xCB10, "RL B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB11, new Instruction<>((short)0xCB11, "RL C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB12, new Instruction<>((short)0xCB12, "RL D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB13, new Instruction<>((short)0xCB13, "RL E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB14, new Instruction<>((short)0xCB14, "RL H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB15, new Instruction<>((short)0xCB15, "RL L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB16, new Instruction<>((short)0xCB16, "RL (HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB17, new Instruction<>((short)0xCB17, "RL A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB18, new Instruction<>((short)0xCB18, "RR B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB19, new Instruction<>((short)0xCB19, "RR C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB1A, new Instruction<>((short)0xCB1A, "RR D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB1B, new Instruction<>((short)0xCB1B, "RR E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB1C, new Instruction<>((short)0xCB1C, "RR H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB1D, new Instruction<>((short)0xCB1D, "RR L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB1E, new Instruction<>((short)0xCB1E, "RR (HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB1F, new Instruction<>((short)0xCB1F, "RR A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCB20, new Instruction<>((short)0xCB20, "SLA B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB21, new Instruction<>((short)0xCB21, "SLA C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB22, new Instruction<>((short)0xCB22, "SLA D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB23, new Instruction<>((short)0xCB23, "SLA E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB24, new Instruction<>((short)0xCB24, "SLA H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB25, new Instruction<>((short)0xCB25, "SLA L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB26, new Instruction<>((short)0xCB26, "SLA (HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB27, new Instruction<>((short)0xCB27, "SLA A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB28, new Instruction<>((short)0xCB28, "SRA B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB29, new Instruction<>((short)0xCB29, "SRA C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB2A, new Instruction<>((short)0xCB2A, "SRA D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB2B, new Instruction<>((short)0xCB2B, "SRA E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB2C, new Instruction<>((short)0xCB2C, "SRA H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB2D, new Instruction<>((short)0xCB2D, "SRA L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB2E, new Instruction<>((short)0xCB2E, "SRA (HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB2F, new Instruction<>((short)0xCB2F, "SRA A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCB30, new Instruction<>((short)0xCB30, "SWAP B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB31, new Instruction<>((short)0xCB31, "SWAP C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB32, new Instruction<>((short)0xCB32, "SWAP D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB33, new Instruction<>((short)0xCB33, "SWAP E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB34, new Instruction<>((short)0xCB34, "SWAP H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB35, new Instruction<>((short)0xCB35, "SWAP L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB36, new Instruction<>((short)0xCB36, "SWAP (HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB37, new Instruction<>((short)0xCB37, "SWAP A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB38, new Instruction<>((short)0xCB38, "SRL B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB39, new Instruction<>((short)0xCB39, "SRL C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB3A, new Instruction<>((short)0xCB3A, "SRL D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB3B, new Instruction<>((short)0xCB3B, "SRL E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB3C, new Instruction<>((short)0xCB3C, "SRL H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB3D, new Instruction<>((short)0xCB3D, "SRL L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB3E, new Instruction<>((short)0xCB3E, "SRL (HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB3F, new Instruction<>((short)0xCB3F, "SRL A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCB40, new Instruction<>((short)0xCB40, "BIT 0,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB41, new Instruction<>((short)0xCB41, "BIT 0,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB42, new Instruction<>((short)0xCB42, "BIT 0,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB43, new Instruction<>((short)0xCB43, "BIT 0,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB44, new Instruction<>((short)0xCB44, "BIT 0,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB45, new Instruction<>((short)0xCB45, "BIT 0,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB46, new Instruction<>((short)0xCB46, "BIT 0,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB47, new Instruction<>((short)0xCB47, "BIT 0,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB48, new Instruction<>((short)0xCB48, "BIT 1,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB49, new Instruction<>((short)0xCB49, "BIT 1,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB4A, new Instruction<>((short)0xCB4A, "BIT 1,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB4B, new Instruction<>((short)0xCB4B, "BIT 1,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB4C, new Instruction<>((short)0xCB4C, "BIT 1,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB4D, new Instruction<>((short)0xCB4D, "BIT 1,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB4E, new Instruction<>((short)0xCB4E, "BIT 1,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB4F, new Instruction<>((short)0xCB4F, "BIT 1,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCB50, new Instruction<>((short)0xCB50, "BIT 2,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB51, new Instruction<>((short)0xCB51, "BIT 2,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB52, new Instruction<>((short)0xCB52, "BIT 2,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB53, new Instruction<>((short)0xCB53, "BIT 2,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB54, new Instruction<>((short)0xCB54, "BIT 2,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB55, new Instruction<>((short)0xCB55, "BIT 2,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB56, new Instruction<>((short)0xCB56, "BIT 2,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB57, new Instruction<>((short)0xCB57, "BIT 2,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB58, new Instruction<>((short)0xCB58, "BIT 3,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB59, new Instruction<>((short)0xCB59, "BIT 3,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB5A, new Instruction<>((short)0xCB5A, "BIT 3,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB5B, new Instruction<>((short)0xCB5B, "BIT 3,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB5C, new Instruction<>((short)0xCB5C, "BIT 3,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB5D, new Instruction<>((short)0xCB5D, "BIT 3,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB5E, new Instruction<>((short)0xCB5E, "BIT 3,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB5F, new Instruction<>((short)0xCB5F, "BIT 3,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCB60, new Instruction<>((short)0xCB60, "BIT 4,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB61, new Instruction<>((short)0xCB61, "BIT 4,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB62, new Instruction<>((short)0xCB62, "BIT 4,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB63, new Instruction<>((short)0xCB63, "BIT 4,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB64, new Instruction<>((short)0xCB64, "BIT 4,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB65, new Instruction<>((short)0xCB65, "BIT 4,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB66, new Instruction<>((short)0xCB66, "BIT 4,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB67, new Instruction<>((short)0xCB67, "BIT 4,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB68, new Instruction<>((short)0xCB68, "BIT 5,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB69, new Instruction<>((short)0xCB69, "BIT 5,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB6A, new Instruction<>((short)0xCB6A, "BIT 5,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB6B, new Instruction<>((short)0xCB6B, "BIT 5,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB6C, new Instruction<>((short)0xCB6C, "BIT 5,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB6D, new Instruction<>((short)0xCB6D, "BIT 5,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB6E, new Instruction<>((short)0xCB6E, "BIT 5,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB6F, new Instruction<>((short)0xCB6F, "BIT 5,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCB70, new Instruction<>((short)0xCB70, "BIT 6,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB71, new Instruction<>((short)0xCB71, "BIT 6,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB72, new Instruction<>((short)0xCB72, "BIT 6,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB73, new Instruction<>((short)0xCB73, "BIT 6,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB74, new Instruction<>((short)0xCB74, "BIT 6,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB75, new Instruction<>((short)0xCB75, "BIT 6,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB76, new Instruction<>((short)0xCB76, "BIT 6,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB77, new Instruction<>((short)0xCB77, "BIT 6,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB78, new Instruction<>((short)0xCB78, "BIT 7,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB79, new Instruction<>((short)0xCB79, "BIT 7,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB7A, new Instruction<>((short)0xCB7A, "BIT 7,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB7B, new Instruction<>((short)0xCB7B, "BIT 7,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB7C, new Instruction<>((short)0xCB7C, "BIT 7,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB7D, new Instruction<>((short)0xCB7D, "BIT 7,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB7E, new Instruction<>((short)0xCB7E, "BIT 7,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB7F, new Instruction<>((short)0xCB7F, "BIT 7,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCB80, new Instruction<>((short)0xCB80, "RES 0,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB81, new Instruction<>((short)0xCB81, "RES 0,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB82, new Instruction<>((short)0xCB82, "RES 0,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB83, new Instruction<>((short)0xCB83, "RES 0,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB84, new Instruction<>((short)0xCB84, "RES 0,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB85, new Instruction<>((short)0xCB85, "RES 0,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB86, new Instruction<>((short)0xCB86, "RES 0,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB87, new Instruction<>((short)0xCB87, "RES 0,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB88, new Instruction<>((short)0xCB88, "RES 1,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB89, new Instruction<>((short)0xCB89, "RES 1,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB8A, new Instruction<>((short)0xCB8A, "RES 1,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB8B, new Instruction<>((short)0xCB8B, "RES 1,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB8C, new Instruction<>((short)0xCB8C, "RES 1,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB8D, new Instruction<>((short)0xCB8D, "RES 1,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB8E, new Instruction<>((short)0xCB8E, "RES 1,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB8F, new Instruction<>((short)0xCB8F, "RES 1,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCB90, new Instruction<>((short)0xCB90, "RES 2,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB91, new Instruction<>((short)0xCB91, "RES 2,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB92, new Instruction<>((short)0xCB92, "RES 2,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB93, new Instruction<>((short)0xCB93, "RES 2,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB94, new Instruction<>((short)0xCB94, "RES 2,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB95, new Instruction<>((short)0xCB95, "RES 2,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB96, new Instruction<>((short)0xCB96, "RES 2,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB97, new Instruction<>((short)0xCB97, "RES 2,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB98, new Instruction<>((short)0xCB98, "RES 3,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB99, new Instruction<>((short)0xCB99, "RES 3,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB9A, new Instruction<>((short)0xCB9A, "RES 3,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB9B, new Instruction<>((short)0xCB9B, "RES 3,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB9C, new Instruction<>((short)0xCB9C, "RES 3,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB9D, new Instruction<>((short)0xCB9D, "RES 3,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB9E, new Instruction<>((short)0xCB9E, "RES 3,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCB9F, new Instruction<>((short)0xCB9F, "RES 3,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCBA0, new Instruction<>((short)0xCBA0, "RES 4,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBA1, new Instruction<>((short)0xCBA1, "RES 4,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBA2, new Instruction<>((short)0xCBA2, "RES 4,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBA3, new Instruction<>((short)0xCBA3, "RES 4,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBA4, new Instruction<>((short)0xCBA4, "RES 4,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBA5, new Instruction<>((short)0xCBA5, "RES 4,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBA6, new Instruction<>((short)0xCBA6, "RES 4,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBA7, new Instruction<>((short)0xCBA7, "RES 4,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBA8, new Instruction<>((short)0xCBA8, "RES 5,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBA9, new Instruction<>((short)0xCBA9, "RES 5,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBAA, new Instruction<>((short)0xCBAA, "RES 5,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBAB, new Instruction<>((short)0xCBAB, "RES 5,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBAC, new Instruction<>((short)0xCBAC, "RES 5,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBAD, new Instruction<>((short)0xCBAD, "RES 5,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBAE, new Instruction<>((short)0xCBAE, "RES 5,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBAF, new Instruction<>((short)0xCBAF, "RES 5,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCBB0, new Instruction<>((short)0xCBB0, "RES 6,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBB1, new Instruction<>((short)0xCBB1, "RES 6,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBB2, new Instruction<>((short)0xCBB2, "RES 6,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBB3, new Instruction<>((short)0xCBB3, "RES 6,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBB4, new Instruction<>((short)0xCBB4, "RES 6,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBB5, new Instruction<>((short)0xCBB5, "RES 6,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBB6, new Instruction<>((short)0xCBB6, "RES 6,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBB7, new Instruction<>((short)0xCBB7, "RES 6,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBB8, new Instruction<>((short)0xCBB8, "RES 7,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBB9, new Instruction<>((short)0xCBB9, "RES 7,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBBA, new Instruction<>((short)0xCBBA, "RES 7,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBBB, new Instruction<>((short)0xCBBB, "RES 7,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBBC, new Instruction<>((short)0xCBBC, "RES 7,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBBD, new Instruction<>((short)0xCBBD, "RES 7,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBBE, new Instruction<>((short)0xCBBE, "RES 7,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBBF, new Instruction<>((short)0xCBBF, "RES 7,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCBC0, new Instruction<>((short)0xCBC0, "SET 0,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBC1, new Instruction<>((short)0xCBC1, "SET 0,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBC2, new Instruction<>((short)0xCBC2, "SET 0,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBC3, new Instruction<>((short)0xCBC3, "SET 0,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBC4, new Instruction<>((short)0xCBC4, "SET 0,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBC5, new Instruction<>((short)0xCBC5, "SET 0,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBC6, new Instruction<>((short)0xCBC6, "SET 0,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBC7, new Instruction<>((short)0xCBC7, "SET 0,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBC8, new Instruction<>((short)0xCBC8, "SET 1,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBC9, new Instruction<>((short)0xCBC9, "SET 1,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBCA, new Instruction<>((short)0xCBCA, "SET 1,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBCB, new Instruction<>((short)0xCBCB, "SET 1,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBCC, new Instruction<>((short)0xCBCC, "SET 1,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBCD, new Instruction<>((short)0xCBCD, "SET 1,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBCE, new Instruction<>((short)0xCBCE, "SET 1,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBCF, new Instruction<>((short)0xCBCF, "SET 1,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCBD0, new Instruction<>((short)0xCBD0, "SET 2,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBD1, new Instruction<>((short)0xCBD1, "SET 2,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBD2, new Instruction<>((short)0xCBD2, "SET 2,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBD3, new Instruction<>((short)0xCBD3, "SET 2,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBD4, new Instruction<>((short)0xCBD4, "SET 2,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBD5, new Instruction<>((short)0xCBD5, "SET 2,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBD6, new Instruction<>((short)0xCBD6, "SET 2,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBD7, new Instruction<>((short)0xCBD7, "SET 2,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBD8, new Instruction<>((short)0xCBD8, "SET 3,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBD9, new Instruction<>((short)0xCBD9, "SET 3,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBDA, new Instruction<>((short)0xCBDA, "SET 3,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBDB, new Instruction<>((short)0xCBDB, "SET 3,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBDC, new Instruction<>((short)0xCBDC, "SET 3,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBDD, new Instruction<>((short)0xCBDD, "SET 3,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBDE, new Instruction<>((short)0xCBDE, "SET 3,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBDF, new Instruction<>((short)0xCBDF, "SET 3,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCBE0, new Instruction<>((short)0xCBE0, "SET 4,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBE1, new Instruction<>((short)0xCBE1, "SET 4,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBE2, new Instruction<>((short)0xCBE2, "SET 4,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBE3, new Instruction<>((short)0xCBE3, "SET 4,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBE4, new Instruction<>((short)0xCBE4, "SET 4,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBE5, new Instruction<>((short)0xCBE5, "SET 4,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBE6, new Instruction<>((short)0xCBE6, "SET 4,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBE7, new Instruction<>((short)0xCBE7, "SET 4,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBE8, new Instruction<>((short)0xCBE8, "SET 5,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBE9, new Instruction<>((short)0xCBE9, "SET 5,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBEA, new Instruction<>((short)0xCBEA, "SET 5,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBEB, new Instruction<>((short)0xCBEB, "SET 5,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBEC, new Instruction<>((short)0xCBEC, "SET 5,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBED, new Instruction<>((short)0xCBED, "SET 5,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBEE, new Instruction<>((short)0xCBEE, "SET 5,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBEF, new Instruction<>((short)0xCBEF, "SET 5,A", (byte)2, (byte)1));

        GB_16BIT_INSTRUCTIONS.put((short)0xCBF0, new Instruction<>((short)0xCBF0, "SET 6,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBF1, new Instruction<>((short)0xCBF1, "SET 6,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBF2, new Instruction<>((short)0xCBF2, "SET 6,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBF3, new Instruction<>((short)0xCBF3, "SET 6,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBF4, new Instruction<>((short)0xCBF4, "SET 6,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBF5, new Instruction<>((short)0xCBF5, "SET 6,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBF6, new Instruction<>((short)0xCBF6, "SET 6,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBF7, new Instruction<>((short)0xCBF7, "SET 6,A", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBF8, new Instruction<>((short)0xCBF8, "SET 7,B", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBF9, new Instruction<>((short)0xCBF9, "SET 7,C", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBFA, new Instruction<>((short)0xCBFA, "SET 7,D", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBFB, new Instruction<>((short)0xCBFB, "SET 7,E", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBFC, new Instruction<>((short)0xCBFC, "SET 7,H", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBFD, new Instruction<>((short)0xCBFD, "SET 7,L", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBFE, new Instruction<>((short)0xCBFE, "SET 7,(HL)", (byte)2, (byte)1));
        GB_16BIT_INSTRUCTIONS.put((short)0xCBFF, new Instruction<>((short)0xCBFF, "SET 7,A", (byte)2, (byte)1));
    }
}
