package jboy.disassembler;

import java.util.HashMap;

/**
 * All the instructions available to the GameBoy's LR35902 processor.
 */
public final class Instructions {
    public static final HashMap<Integer, Instruction> GB_8BIT_INSTRUCTIONS = new HashMap<>();
    public static final HashMap<Integer, Instruction> GB_16BIT_INSTRUCTIONS = new HashMap<>();

    static {
        /*############################################################################
                                    8 Bit Instructions
        ############################################################################*/
        GB_8BIT_INSTRUCTIONS.put(0x00, new Instruction(0x00, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x01, new Instruction(0x01, "ld bc,**", 3, 12));
        GB_8BIT_INSTRUCTIONS.put(0x02, new Instruction(0x02, "ld (bc),a", 1, 8));
        GB_8BIT_INSTRUCTIONS.put(0x03, new Instruction(0x03, "inc bc", 1, 8));
        GB_8BIT_INSTRUCTIONS.put(0x04, new Instruction(0x04, "inc c", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x05, new Instruction(0x05, "dec b", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x06, new Instruction(0x06, "ld b,*", 2, 8));
        GB_8BIT_INSTRUCTIONS.put(0x07, new Instruction(0x07, "rlca", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x08, new Instruction(0x08, "ld (**),sp", 3, 20));
        GB_8BIT_INSTRUCTIONS.put(0x09, new Instruction(0x09, "add hl,bc", 1, 8));
        GB_8BIT_INSTRUCTIONS.put(0x0A, new Instruction(0x0A, "ld a,(bc)", 1, 8));
        GB_8BIT_INSTRUCTIONS.put(0x0B, new Instruction(0x0B, "dec bc", 1, 8));
        GB_8BIT_INSTRUCTIONS.put(0x0C, new Instruction(0x0C, "inc c", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x0D, new Instruction(0x0D, "dec c", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x0E, new Instruction(0x0E, "ld C,*", 2, 8));
        GB_8BIT_INSTRUCTIONS.put(0x0F, new Instruction(0x0F, "rrca", 1, 4));

        GB_8BIT_INSTRUCTIONS.put(0x10, new Instruction(0x10, "stop", 2, 4));
        GB_8BIT_INSTRUCTIONS.put(0x11, new Instruction(0x11, "ld de,**", 3, 12));
        GB_8BIT_INSTRUCTIONS.put(0x12, new Instruction(0x12, "ld (de),a", 1, 8));
        GB_8BIT_INSTRUCTIONS.put(0x13, new Instruction(0x13, "inc de", 1, 8));
        GB_8BIT_INSTRUCTIONS.put(0x14, new Instruction(0x14, "inc d", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x15, new Instruction(0x15, "dec d", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x16, new Instruction(0x16, "ld d,*", 2, 8));
        GB_8BIT_INSTRUCTIONS.put(0x17, new Instruction(0x17, "rla", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x18, new Instruction(0x18, "jr *", 2, 12));
        GB_8BIT_INSTRUCTIONS.put(0x19, new Instruction(0x19, "add hl,de", 1, 8));
        GB_8BIT_INSTRUCTIONS.put(0x1A, new Instruction(0x1A, "ld a,(de)", 1, 8));
        GB_8BIT_INSTRUCTIONS.put(0x1B, new Instruction(0x1B, "dec de", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x1C, new Instruction(0x1C, "inc e", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x1D, new Instruction(0x1D, "dec e", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0x1E, new Instruction(0x1E, "ld e,*", 2, 8));
        GB_8BIT_INSTRUCTIONS.put(0x1F, new Instruction(0x1F, "rra", 1, 4));

        GB_8BIT_INSTRUCTIONS.put(0x20, new Instruction(0x20, "jr nz,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0x21, new Instruction(0x21, "ld hl,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0x22, new Instruction(0x22, "ld (hl+),a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x23, new Instruction(0x23, "inc hl", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x24, new Instruction(0x24, "inc h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x25, new Instruction(0x25, "dec h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x26, new Instruction(0x26, "ld h,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0x27, new Instruction(0x27, "daa", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x28, new Instruction(0x28, "jr z,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0x29, new Instruction(0x29, "add hl,hl", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x2A, new Instruction(0x2A, "ld a,(hl+)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x2B, new Instruction(0x2B, "dec hl", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x2C, new Instruction(0x2C, "inc l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x2D, new Instruction(0x2D, "dec l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x2E, new Instruction(0x2E, "ld l,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0x2F, new Instruction(0x2F, "cpl", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0x30, new Instruction(0x30, "jr nc,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0x31, new Instruction(0x31, "ld sp,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0x32, new Instruction(0x32, "ld (hl-),a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x33, new Instruction(0x33, "inc sp", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x34, new Instruction(0x34, "inc (hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x35, new Instruction(0x35, "dec (hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x36, new Instruction(0x36, "ld (hl),*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0x37, new Instruction(0x37, "scf", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x38, new Instruction(0x38, "jr c,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0x39, new Instruction(0x39, "add hl,sp", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x3A, new Instruction(0x3A, "ld a,(hl-)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x3B, new Instruction(0x3B, "dec sp", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x3C, new Instruction(0x3C, "inc a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x3D, new Instruction(0x3D, "dec a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x3E, new Instruction(0x3E, "ld a,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0x3F, new Instruction(0x3F, "ccf", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0x40, new Instruction(0x40, "ld b,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x41, new Instruction(0x41, "ld b,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x42, new Instruction(0x42, "ld b,d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x43, new Instruction(0x43, "ld b,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x44, new Instruction(0x44, "ld b,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x45, new Instruction(0x45, "ld b,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x46, new Instruction(0x46, "ld b,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x47, new Instruction(0x47, "ld b,a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x48, new Instruction(0x48, "ld c,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x49, new Instruction(0x49, "ld c,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x4A, new Instruction(0x4A, "ld c,d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x4B, new Instruction(0x4B, "ld c,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x4C, new Instruction(0x4C, "ld c,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x4D, new Instruction(0x4D, "ld c,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x4E, new Instruction(0x4E, "ld c,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x4F, new Instruction(0x4F, "LC c,a", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0x50, new Instruction(0x50, "ld d,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x51, new Instruction(0x51, "ld d,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x52, new Instruction(0x52, "ld d,d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x53, new Instruction(0x53, "ld d,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x54, new Instruction(0x54, "ld d,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x55, new Instruction(0x55, "ld d,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x56, new Instruction(0x56, "ld d,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x57, new Instruction(0x57, "ld d,a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x58, new Instruction(0x58, "ld e,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x59, new Instruction(0x59, "ld e,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x5A, new Instruction(0x5A, "ld e,d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x5B, new Instruction(0x5B, "ld e,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x5C, new Instruction(0x5C, "ld e,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x5D, new Instruction(0x5D, "ld e,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x5E, new Instruction(0x5E, "ld e,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x5F, new Instruction(0x5F, "ld e,a", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0x60, new Instruction(0x60, "ld h,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x61, new Instruction(0x61, "ld h,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x62, new Instruction(0x62, "ld h,d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x63, new Instruction(0x63, "ld h,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x64, new Instruction(0x64, "ld h,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x65, new Instruction(0x65, "ld h,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x66, new Instruction(0x66, "ld h,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x67, new Instruction(0x67, "ld h,a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x68, new Instruction(0x68, "ld l,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x69, new Instruction(0x69, "ld l,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x6A, new Instruction(0x6A, "ld l,d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x6B, new Instruction(0x6B, "ld l,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x6C, new Instruction(0x6C, "ld l,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x6D, new Instruction(0x6D, "ld l,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x6E, new Instruction(0x6E, "ld l,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x6F, new Instruction(0x6F, "ld l,a", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0x70, new Instruction(0x70, "ld (hl),b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x71, new Instruction(0x71, "ld (hl),c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x72, new Instruction(0x72, "ld (hl),d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x73, new Instruction(0x73, "ld (hl),e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x74, new Instruction(0x74, "ld (hl),h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x75, new Instruction(0x75, "ld (hl),l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x76, new Instruction(0x76, "ld (hl),(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x77, new Instruction(0x77, "ld (hl),a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x78, new Instruction(0x78, "ld a,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x79, new Instruction(0x79, "ld a,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x7A, new Instruction(0x7A, "ld a,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x7B, new Instruction(0x7B, "ld a,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x7C, new Instruction(0x7C, "ld a,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x7D, new Instruction(0x7D, "ld a,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x7E, new Instruction(0x7E, "ld a,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x7F, new Instruction(0x7F, "ld a,a", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0x80, new Instruction(0x80, "add a,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x81, new Instruction(0x81, "add a,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x82, new Instruction(0x82, "add a,d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x83, new Instruction(0x83, "add a,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x84, new Instruction(0x84, "add a,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x85, new Instruction(0x85, "add a,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x86, new Instruction(0x86, "add a,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x87, new Instruction(0x87, "add a,a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x88, new Instruction(0x88, "adc a,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x89, new Instruction(0x89, "adc a,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x8A, new Instruction(0x8A, "adc a,d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x8B, new Instruction(0x8B, "adc a,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x8C, new Instruction(0x8C, "adc a,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x8D, new Instruction(0x8D, "adc a,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x8E, new Instruction(0x8E, "adc a,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x8F, new Instruction(0x8F, "adc a,a", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0x90, new Instruction(0x90, "sub b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x91, new Instruction(0x91, "sub c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x92, new Instruction(0x92, "sub d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x93, new Instruction(0x93, "sub e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x94, new Instruction(0x94, "sub h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x95, new Instruction(0x95, "sub l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x96, new Instruction(0x96, "sub (hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x97, new Instruction(0x97, "sub a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x98, new Instruction(0x98, "sbc a,b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x99, new Instruction(0x99, "sbc a,c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x9A, new Instruction(0x9A, "sbc a,d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x9B, new Instruction(0x9B, "sbc a,e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x9C, new Instruction(0x9C, "sbc a,h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x9D, new Instruction(0x9D, "sbc a,l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x9E, new Instruction(0x9E, "sbc a,(hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0x9F, new Instruction(0x9F, "sbc a,a", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0xA0, new Instruction(0xA0, "and b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xA1, new Instruction(0xA1, "and c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xA2, new Instruction(0xA2, "and d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xA3, new Instruction(0xA3, "and e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xA4, new Instruction(0xA4, "and h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xA5, new Instruction(0xA5, "and l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xA6, new Instruction(0xA6, "and (hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xA7, new Instruction(0xA7, "and a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xA8, new Instruction(0xA8, "xor b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xA9, new Instruction(0xA9, "xor c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xAA, new Instruction(0xAA, "xor d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xAB, new Instruction(0xAB, "xor e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xAC, new Instruction(0xAC, "xor h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xAD, new Instruction(0xAD, "xor l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xAE, new Instruction(0xAE, "xor (hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xAF, new Instruction(0xAF, "xor a", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0xB0, new Instruction(0xB0, "or b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xB1, new Instruction(0xB1, "or c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xB2, new Instruction(0xB2, "or d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xB3, new Instruction(0xB3, "or e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xB4, new Instruction(0xB4, "or h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xB5, new Instruction(0xB5, "or l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xB6, new Instruction(0xB6, "or (hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xB7, new Instruction(0xB7, "or a", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xB8, new Instruction(0xB8, "cp b", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xB9, new Instruction(0xB9, "cp c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xBA, new Instruction(0xBA, "cp d", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xBB, new Instruction(0xBB, "cp e", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xBC, new Instruction(0xBC, "cp h", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xBD, new Instruction(0xBD, "cp l", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xBE, new Instruction(0xBE, "cp (hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xBF, new Instruction(0xBF, "cp a", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0xC0, new Instruction(0xC0, "ret nz", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xC1, new Instruction(0xC1, "pop bc", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xC2, new Instruction(0xC2, "jp nz,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xC3, new Instruction(0xC3, "jp **", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xC4, new Instruction(0xC4, "call nz,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xC5, new Instruction(0xC5, "push bc", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xC6, new Instruction(0xC6, "add a,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xC7, new Instruction(0xC7, "rst $00", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xC8, new Instruction(0xC8, "ret z", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xC9, new Instruction(0xC9, "ret", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xCA, new Instruction(0xCA, "jp z,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xCC, new Instruction(0xCC, "call z,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xCD, new Instruction(0xCD, "call **", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xCE, new Instruction(0xCE, "adc a,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xCF, new Instruction(0xCF, "rst $08", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0xD0, new Instruction(0xD0, "ret nc", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xD1, new Instruction(0xD1, "pop de", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xD2, new Instruction(0xD2, "jp nc,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xD3, new Instruction(0xD3, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xD4, new Instruction(0xD4, "call nc,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xD5, new Instruction(0xD5, "push de", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xD6, new Instruction(0xD6, "sub *", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xD7, new Instruction(0xD7, "rst $10", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xD8, new Instruction(0xD8, "ret c", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xD9, new Instruction(0xD9, "reti", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xDA, new Instruction(0xDA, "jp c,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xDB, new Instruction(0xDB, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xDC, new Instruction(0xDC, "call c,**", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xDD, new Instruction(0xDD, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xDE, new Instruction(0xDE, "sbc c,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xDF, new Instruction(0xDF, "rst $18", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0xE0, new Instruction(0xE0, "ldh ($FF*),a", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xE1, new Instruction(0xE1, "pop hl", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xE2, new Instruction(0xE2, "ld (c),a", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xE3, new Instruction(0xE3, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xE4, new Instruction(0xE4, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xE5, new Instruction(0xE5, "push hl", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xE6, new Instruction(0xE6, "and *", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xE7, new Instruction(0xE7, "rst $20", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xE8, new Instruction(0xE8, "add sp,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xE9, new Instruction(0xE9, "jp (hl)", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xEA, new Instruction(0xEA, "ld (**),a", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xEB, new Instruction(0xEB, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xEC, new Instruction(0xEC, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xED, new Instruction(0xED, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xEE, new Instruction(0xEE, "xor *", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xEF, new Instruction(0xEF, "rst $28", 1, 1));

        GB_8BIT_INSTRUCTIONS.put(0xF0, new Instruction(0xF0, "ldh a,($FF*)", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xF1, new Instruction(0xF1, "pop af", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xF2, new Instruction(0xF2, "ld a,(c)", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xF3, new Instruction(0xF3, "di", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xF4, new Instruction(0xF4, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xF5, new Instruction(0xF5, "push af", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xF6, new Instruction(0xF6, "or *", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xF7, new Instruction(0xF7, "rst $30", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xF8, new Instruction(0xF8, "ldhl sp,*", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xF9, new Instruction(0xF9, "ld sp,hl", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xFA, new Instruction(0xFA, "ld a,(**)", 3, 1));
        GB_8BIT_INSTRUCTIONS.put(0xFB, new Instruction(0xFB, "ei", 1, 1));
        GB_8BIT_INSTRUCTIONS.put(0xFC, new Instruction(0xFC, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xFD, new Instruction(0xFD, "nop", 1, 4));
        GB_8BIT_INSTRUCTIONS.put(0xFE, new Instruction(0xFE, "cp *", 2, 1));
        GB_8BIT_INSTRUCTIONS.put(0xFF, new Instruction(0xFF, "rst $38", 1, 1));


        /*############################################################################
                                    16 Bit Instructions
        ############################################################################*/
        GB_16BIT_INSTRUCTIONS.put(0xCB00, new Instruction(0xCB00, "rlc b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB01, new Instruction(0xCB01, "rlc c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB02, new Instruction(0xCB02, "rlc d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB03, new Instruction(0xCB03, "rlc e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB04, new Instruction(0xCB04, "rlc h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB05, new Instruction(0xCB05, "rlc l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB06, new Instruction(0xCB06, "rlc (hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB07, new Instruction(0xCB07, "rlc a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB08, new Instruction(0xCB08, "rrc b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB09, new Instruction(0xCB09, "rrc c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB0A, new Instruction(0xCB0A, "rrc d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB0B, new Instruction(0xCB0B, "rrc e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB0C, new Instruction(0xCB0C, "rrc h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB0D, new Instruction(0xCB0D, "rrc l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB0E, new Instruction(0xCB0E, "rrc (hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB0F, new Instruction(0xCB0F, "rrc a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCB10, new Instruction(0xCB10, "rl b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB11, new Instruction(0xCB11, "rl c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB12, new Instruction(0xCB12, "rl d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB13, new Instruction(0xCB13, "rl e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB14, new Instruction(0xCB14, "rl h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB15, new Instruction(0xCB15, "rl l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB16, new Instruction(0xCB16, "rl (hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB17, new Instruction(0xCB17, "rl a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB18, new Instruction(0xCB18, "rr b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB19, new Instruction(0xCB19, "rr c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB1A, new Instruction(0xCB1A, "rr d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB1B, new Instruction(0xCB1B, "rr e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB1C, new Instruction(0xCB1C, "rr h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB1D, new Instruction(0xCB1D, "rr l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB1E, new Instruction(0xCB1E, "rr (hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB1F, new Instruction(0xCB1F, "rr a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCB20, new Instruction(0xCB20, "sla b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB21, new Instruction(0xCB21, "sla c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB22, new Instruction(0xCB22, "sla d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB23, new Instruction(0xCB23, "sla e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB24, new Instruction(0xCB24, "sla h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB25, new Instruction(0xCB25, "sla l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB26, new Instruction(0xCB26, "sla (hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB27, new Instruction(0xCB27, "sla a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB28, new Instruction(0xCB28, "sra b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB29, new Instruction(0xCB29, "sra c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB2A, new Instruction(0xCB2A, "sra d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB2B, new Instruction(0xCB2B, "sra e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB2C, new Instruction(0xCB2C, "sra h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB2D, new Instruction(0xCB2D, "sra l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB2E, new Instruction(0xCB2E, "sra (hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB2F, new Instruction(0xCB2F, "sra a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCB30, new Instruction(0xCB30, "swap b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB31, new Instruction(0xCB31, "swap c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB32, new Instruction(0xCB32, "swap d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB33, new Instruction(0xCB33, "swap e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB34, new Instruction(0xCB34, "swap h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB35, new Instruction(0xCB35, "swap l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB36, new Instruction(0xCB36, "swap (hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB37, new Instruction(0xCB37, "swap a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB38, new Instruction(0xCB38, "srl b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB39, new Instruction(0xCB39, "srl c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB3A, new Instruction(0xCB3A, "srl d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB3B, new Instruction(0xCB3B, "srl e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB3C, new Instruction(0xCB3C, "srl h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB3D, new Instruction(0xCB3D, "srl l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB3E, new Instruction(0xCB3E, "srl (hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB3F, new Instruction(0xCB3F, "srl a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCB40, new Instruction(0xCB40, "bit 0,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB41, new Instruction(0xCB41, "bit 0,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB42, new Instruction(0xCB42, "bit 0,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB43, new Instruction(0xCB43, "bit 0,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB44, new Instruction(0xCB44, "bit 0,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB45, new Instruction(0xCB45, "bit 0,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB46, new Instruction(0xCB46, "bit 0,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB47, new Instruction(0xCB47, "bit 0,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB48, new Instruction(0xCB48, "bit 1,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB49, new Instruction(0xCB49, "bit 1,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB4A, new Instruction(0xCB4A, "bit 1,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB4B, new Instruction(0xCB4B, "bit 1,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB4C, new Instruction(0xCB4C, "bit 1,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB4D, new Instruction(0xCB4D, "bit 1,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB4E, new Instruction(0xCB4E, "bit 1,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB4F, new Instruction(0xCB4F, "bit 1,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCB50, new Instruction(0xCB50, "bit 2,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB51, new Instruction(0xCB51, "bit 2,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB52, new Instruction(0xCB52, "bit 2,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB53, new Instruction(0xCB53, "bit 2,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB54, new Instruction(0xCB54, "bit 2,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB55, new Instruction(0xCB55, "bit 2,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB56, new Instruction(0xCB56, "bit 2,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB57, new Instruction(0xCB57, "bit 2,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB58, new Instruction(0xCB58, "bit 3,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB59, new Instruction(0xCB59, "bit 3,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB5A, new Instruction(0xCB5A, "bit 3,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB5B, new Instruction(0xCB5B, "bit 3,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB5C, new Instruction(0xCB5C, "bit 3,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB5D, new Instruction(0xCB5D, "bit 3,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB5E, new Instruction(0xCB5E, "bit 3,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB5F, new Instruction(0xCB5F, "bit 3,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCB60, new Instruction(0xCB60, "bit 4,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB61, new Instruction(0xCB61, "bit 4,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB62, new Instruction(0xCB62, "bit 4,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB63, new Instruction(0xCB63, "bit 4,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB64, new Instruction(0xCB64, "bit 4,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB65, new Instruction(0xCB65, "bit 4,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB66, new Instruction(0xCB66, "bit 4,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB67, new Instruction(0xCB67, "bit 4,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB68, new Instruction(0xCB68, "bit 5,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB69, new Instruction(0xCB69, "bit 5,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB6A, new Instruction(0xCB6A, "bit 5,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB6B, new Instruction(0xCB6B, "bit 5,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB6C, new Instruction(0xCB6C, "bit 5,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB6D, new Instruction(0xCB6D, "bit 5,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB6E, new Instruction(0xCB6E, "bit 5,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB6F, new Instruction(0xCB6F, "bit 5,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCB70, new Instruction(0xCB70, "bit 6,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB71, new Instruction(0xCB71, "bit 6,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB72, new Instruction(0xCB72, "bit 6,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB73, new Instruction(0xCB73, "bit 6,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB74, new Instruction(0xCB74, "bit 6,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB75, new Instruction(0xCB75, "bit 6,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB76, new Instruction(0xCB76, "bit 6,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB77, new Instruction(0xCB77, "bit 6,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB78, new Instruction(0xCB78, "bit 7,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB79, new Instruction(0xCB79, "bit 7,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB7A, new Instruction(0xCB7A, "bit 7,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB7B, new Instruction(0xCB7B, "bit 7,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB7C, new Instruction(0xCB7C, "bit 7,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB7D, new Instruction(0xCB7D, "bit 7,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB7E, new Instruction(0xCB7E, "bit 7,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB7F, new Instruction(0xCB7F, "bit 7,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCB80, new Instruction(0xCB80, "res 0,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB81, new Instruction(0xCB81, "res 0,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB82, new Instruction(0xCB82, "res 0,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB83, new Instruction(0xCB83, "res 0,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB84, new Instruction(0xCB84, "res 0,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB85, new Instruction(0xCB85, "res 0,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB86, new Instruction(0xCB86, "res 0,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB87, new Instruction(0xCB87, "res 0,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB88, new Instruction(0xCB88, "res 1,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB89, new Instruction(0xCB89, "res 1,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB8A, new Instruction(0xCB8A, "res 1,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB8B, new Instruction(0xCB8B, "res 1,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB8C, new Instruction(0xCB8C, "res 1,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB8D, new Instruction(0xCB8D, "res 1,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB8E, new Instruction(0xCB8E, "res 1,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB8F, new Instruction(0xCB8F, "res 1,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCB90, new Instruction(0xCB90, "res 2,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB91, new Instruction(0xCB91, "res 2,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB92, new Instruction(0xCB92, "res 2,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB93, new Instruction(0xCB93, "res 2,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB94, new Instruction(0xCB94, "res 2,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB95, new Instruction(0xCB95, "res 2,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB96, new Instruction(0xCB96, "res 2,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB97, new Instruction(0xCB97, "res 2,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB98, new Instruction(0xCB98, "res 3,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB99, new Instruction(0xCB99, "res 3,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB9A, new Instruction(0xCB9A, "res 3,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB9B, new Instruction(0xCB9B, "res 3,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB9C, new Instruction(0xCB9C, "res 3,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB9D, new Instruction(0xCB9D, "res 3,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB9E, new Instruction(0xCB9E, "res 3,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCB9F, new Instruction(0xCB9F, "res 3,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCBA0, new Instruction(0xCBA0, "res 4,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBA1, new Instruction(0xCBA1, "res 4,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBA2, new Instruction(0xCBA2, "res 4,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBA3, new Instruction(0xCBA3, "res 4,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBA4, new Instruction(0xCBA4, "res 4,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBA5, new Instruction(0xCBA5, "res 4,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBA6, new Instruction(0xCBA6, "res 4,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBA7, new Instruction(0xCBA7, "res 4,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBA8, new Instruction(0xCBA8, "res 5,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBA9, new Instruction(0xCBA9, "res 5,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBAA, new Instruction(0xCBAA, "res 5,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBAB, new Instruction(0xCBAB, "res 5,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBAC, new Instruction(0xCBAC, "res 5,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBAD, new Instruction(0xCBAD, "res 5,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBAE, new Instruction(0xCBAE, "res 5,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBAF, new Instruction(0xCBAF, "res 5,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCBB0, new Instruction(0xCBB0, "res 6,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBB1, new Instruction(0xCBB1, "res 6,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBB2, new Instruction(0xCBB2, "res 6,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBB3, new Instruction(0xCBB3, "res 6,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBB4, new Instruction(0xCBB4, "res 6,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBB5, new Instruction(0xCBB5, "res 6,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBB6, new Instruction(0xCBB6, "res 6,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBB7, new Instruction(0xCBB7, "res 6,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBB8, new Instruction(0xCBB8, "res 7,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBB9, new Instruction(0xCBB9, "res 7,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBBA, new Instruction(0xCBBA, "res 7,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBBB, new Instruction(0xCBBB, "res 7,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBBC, new Instruction(0xCBBC, "res 7,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBBD, new Instruction(0xCBBD, "res 7,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBBE, new Instruction(0xCBBE, "res 7,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBBF, new Instruction(0xCBBF, "res 7,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCBC0, new Instruction(0xCBC0, "set 0,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBC1, new Instruction(0xCBC1, "set 0,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBC2, new Instruction(0xCBC2, "set 0,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBC3, new Instruction(0xCBC3, "set 0,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBC4, new Instruction(0xCBC4, "set 0,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBC5, new Instruction(0xCBC5, "set 0,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBC6, new Instruction(0xCBC6, "set 0,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBC7, new Instruction(0xCBC7, "set 0,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBC8, new Instruction(0xCBC8, "set 1,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBC9, new Instruction(0xCBC9, "set 1,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBCA, new Instruction(0xCBCA, "set 1,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBCB, new Instruction(0xCBCB, "set 1,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBCC, new Instruction(0xCBCC, "set 1,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBCD, new Instruction(0xCBCD, "set 1,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBCE, new Instruction(0xCBCE, "set 1,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBCF, new Instruction(0xCBCF, "set 1,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCBD0, new Instruction(0xCBD0, "set 2,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBD1, new Instruction(0xCBD1, "set 2,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBD2, new Instruction(0xCBD2, "set 2,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBD3, new Instruction(0xCBD3, "set 2,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBD4, new Instruction(0xCBD4, "set 2,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBD5, new Instruction(0xCBD5, "set 2,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBD6, new Instruction(0xCBD6, "set 2,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBD7, new Instruction(0xCBD7, "set 2,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBD8, new Instruction(0xCBD8, "set 3,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBD9, new Instruction(0xCBD9, "set 3,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBDA, new Instruction(0xCBDA, "set 3,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBDB, new Instruction(0xCBDB, "set 3,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBDC, new Instruction(0xCBDC, "set 3,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBDD, new Instruction(0xCBDD, "set 3,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBDE, new Instruction(0xCBDE, "set 3,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBDF, new Instruction(0xCBDF, "set 3,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCBE0, new Instruction(0xCBE0, "set 4,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBE1, new Instruction(0xCBE1, "set 4,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBE2, new Instruction(0xCBE2, "set 4,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBE3, new Instruction(0xCBE3, "set 4,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBE4, new Instruction(0xCBE4, "set 4,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBE5, new Instruction(0xCBE5, "set 4,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBE6, new Instruction(0xCBE6, "set 4,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBE7, new Instruction(0xCBE7, "set 4,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBE8, new Instruction(0xCBE8, "set 5,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBE9, new Instruction(0xCBE9, "set 5,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBEA, new Instruction(0xCBEA, "set 5,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBEB, new Instruction(0xCBEB, "set 5,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBEC, new Instruction(0xCBEC, "set 5,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBED, new Instruction(0xCBED, "set 5,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBEE, new Instruction(0xCBEE, "set 5,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBEF, new Instruction(0xCBEF, "set 5,a", 2, 1));

        GB_16BIT_INSTRUCTIONS.put(0xCBF0, new Instruction(0xCBF0, "set 6,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBF1, new Instruction(0xCBF1, "set 6,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBF2, new Instruction(0xCBF2, "set 6,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBF3, new Instruction(0xCBF3, "set 6,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBF4, new Instruction(0xCBF4, "set 6,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBF5, new Instruction(0xCBF5, "set 6,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBF6, new Instruction(0xCBF6, "set 6,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBF7, new Instruction(0xCBF7, "set 6,a", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBF8, new Instruction(0xCBF8, "set 7,b", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBF9, new Instruction(0xCBF9, "set 7,c", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBFA, new Instruction(0xCBFA, "set 7,d", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBFB, new Instruction(0xCBFB, "set 7,e", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBFC, new Instruction(0xCBFC, "set 7,h", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBFD, new Instruction(0xCBFD, "set 7,l", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBFE, new Instruction(0xCBFE, "set 7,(hl)", 2, 1));
        GB_16BIT_INSTRUCTIONS.put(0xCBFF, new Instruction(0xCBFF, "set 7,a", 2, 1));
    }
}
