package jboy.gameboy;

/**
 * The GameBoy uses a chip that's a cross between the Intel 8080 and the Zilog Z80. The chip is the Sharp LR35902.
 *
 * Information about the CPU:
 *   Number of instructions: 500
 *     Notes:
 *       -
 *
 *   Registers:
 *     8-bit: A, B, C, D, E, F, H, L
 *     16-bit: AF, BC, DE, HL, SP, PC
 *       Notes:
 *         - The F register is indirectly accessible by the programmer, and is used to store the results of various math operations.
 *         - The PC register points to the next instruction to be executed in memory.
 *         - The SP register points to the current stack position.
 *         - The F register consists of the following:
 *           - Zero flag (Z): This bit is set when the result of a math operation is zero or two values match when using the CP instruction.
 *           - Subtract flag (N): This bit is set if a subtraction was performed in the last math instruction.
 *           - Half carry flag (H): This bit is set if a carry occurred from the lower nibble in the last math operation.
 *           - Carry flag (C): This bit is set if a carry occurred from the last math operation of if register A is the smaller value when executing the CP instruction.
 *         - On power up, the PC is initialized to 0x100 and the instruction at that location in the ROM is executed.
 *           - From here on the PC is controlled indirectly by the instructions themselves that were generated by the programmer of the ROM cart.
 *         - The SP is used to keep track of the top of the stack.
 *           - The Stack is used for saving variables, saving return addressed, passing arguments to subroutines and various other uses.
 *           - The instructions CALL, PUSH and RST all put information onto the stack.
 *           - The instructions POP, RET and RETI all take information off of the stack.
 *           - Interrupts put a return address on the stack and remove it at the completion as well.
 *           - As information is put onto the stack, the stack grows DOWNWARD in RAM. As a result SP should always be initialized at the highest location of RAM space that has been allocated for use byu the stack.
 *             - For example, if a programmer wants to locate the SP at the top of low RAM space (0xC000 - 0xDFFF) he would set SP to 0xE000 using LD SP,$E000.
 *               (The SP automatically decrements before it puts something onto the stack, so it is perfectly acceptable to assign it a value which points to a memory address which is one location past the end of available RAM.)
 *             - The SP is initialized to 0xFFFE on power up, but a programmer should not rely on this setting and should explicitly set its value.
 *
 *   Clock speed: 4.194304 MHz (4.19 MHz)
 *     Notes:
 *       - Official Nintendo documents refer to "machine cycles" when describing instructions.
 *       - One machine cycle equals four CPU clock cycles.
 *       - The numerical value of a machine cycle is 1.048576 MHz (1.05 MHz)
 *
 */
public class CPU {
    int A;
    int B;
    int C;
    int D;
    int E;
    int F;
    int H;
    int L;
    int SP;
    int PC;

    /**
     * Description:
     *   Load nn into n
     * Operations:
     *   LD B,n ; 0x06, 8 cycles
     *   LD C,n ; 0x0E, 8 cycles
     *   LD D,n ; 0x16, 8 cycles
     *   LD E,n ; 0x1E, 8 cycles
     *   LD H,n ; 0x26, 8 cycles
     *   LD L,n ; 0x2E, 8 cycles
     */
    void ld_nn_n(int nn, int n) {

    }
}
